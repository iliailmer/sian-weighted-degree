    |\^/|     Maple 2021 (APPLE UNIVERSAL OSX)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2021
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
Warning, extra characters at end of parsed string
# Ex 20 from  https://arxiv.org/abs/2006.14295
> kernelopts(printbytes=false, assertlevel=1):
> interface(echo=0, prettyprint=0):
Warning, (in SimpleSubstitutions) `alg_indep` is implicitly declared local
|imports/create_substitutions.mpl:22|
Warning, (in SubsByDepth) `alg_indep` is implicitly declared local
|imports/create_substitutions.mpl:53|
Warning, (in SubsByDepth) `original_et_hat` is implicitly declared local
|imports/create_substitutions.mpl:81|
Warning, (in SubsByDepth) `all_subs` is implicitly declared local
|imports/create_substitutions.mpl:82|
Warning, (in SubsByDepth) `names` is implicitly declared local
|imports/create_substitutions.mpl:83|
Warning, (in SubsByDepth) `selection` is implicitly declared local
|imports/create_substitutions.mpl:85|
Warning, (in SubsByDepth) `other` is implicitly declared local
|imports/create_substitutions.mpl:86|
sigma := [diff(S(t),t) = -S(t)*a*In(t)-S(t)*b*Dd(t)-S(t)*g*A(t)-S(t)*dlt*R(t),
diff(In(t),t) = S(t)*a*In(t)+S(t)*b*Dd(t)+S(t)*g*A(t)+S(t)*dlt*R(t)-eps*In(t)-
zeta*In(t)-lam*In(t), diff(Dd(t),t) = eps*In(t)-eta*Dd(t)-rho*Dd(t), diff(A(t),
t) = zeta*In(t)-th*A(t)-mu*A(t)-kappa*A(t), diff(R(t),t) = eta*Dd(t)+th*A(t)-nu
*R(t)-ksi*R(t), diff(Tt(t),t) = mu*A(t)+nu*R(t)-sgm*Tt(t)-ta*Tt(t), diff(Hh(t),
t) = lam*In(t)+rho*Dd(t)+kappa*A(t)+ksi*R(t)+sgm*Tt(t), diff(E(t),t) = ta*Tt(t)
, y1(t) = Dd(t)+R(t)+Tt(t)]

=======================================================
0. Extracting states, inputs, outputs, and parameters from the system
=======================================================

=== Input info ===
State variables:          [S(t), In(t), Dd(t), A(t), R(t), Tt(t), Hh(t), E(t)]
Output variables:         [y1(t)]
Input variables:          []
Parameters in equations:  [a, b, dlt, eps, eta, g, kappa, ksi, lam, mu, nu, rho, sgm, ta, th, zeta]
===================


=======================================================
1. Constructing the maximal polynomial system
=======================================================

=======================================================
2. Truncating the polynomial system based on the Jacobian condition
=======================================================

=======================================================
3. Assessing local identifiability
=======================================================
{A_0, E_0, Hh_0, In_0, R_0, sgm}
Locally identifiable paramters:  [Dd(0)]
Nonidentifiable parameter:  [A(0), E(0), Hh(0), In(0), R(0), S(0), Tt(0), a, b, dlt, eps, eta, g, kappa, ksi, lam, mu, nu, rho, sgm, ta, th, zeta]
Algebraically independent parameters {sgm, A(0), E(0), Hh(0), In(0), R(0)}

=======================================================
Substituting transcendence basis.
=======================================================
Algebraically independent parameters among nonidentifiable: {sgm}
Algebraically independent parameters among derivatives: {A(0), E(0), Hh(0), In(0), R(0)}

=== Input info ===
State variables:          [sgm(t), S(t), In(t), Dd(t), A(t), R(t), Tt(t), Hh(t), E(t)]
Output variables:         [y1(t), y_faux1(t)]
Input variables:          []
Parameters in equations:  [a, b, dlt, eps, eta, g, kappa, ksi, lam, mu, nu, rho, ta, th, zeta]
===================


=======================================================
4. Randomizing the truncated system
=======================================================
States for substitution:	[kappa = 2, In_ = 1, th = 1, g = 2, rho = 1, ta = 1, Dd_ = 0, mu = 1, Tt_ = 0, eta = 2, a = 2, lam = 2, b = 2, zeta = 2, S_ = 2, eps = 1, nu = 2, R_ = 0, A_ = 1, sgm_ = 0, ksi = 1, dlt = 2]
NonID parameters:	[A_0, E_0, Hh_0, In_0, R_0, S_0, Tt_0, a, b, dlt, eps, eta, g, kappa, ksi, lam, mu, nu, rho, sgm, ta, th, zeta]
Substitutions:	[In_ = 2, z_aux = 2, Dd_ = 1, Tt_ = 1, S_ = 3, R_ = 1, A_ = 2, sgm_ = 1]

=======================================================
0. Extracting states, inputs, outputs, and parameters from the system
=======================================================

=== Input info ===
State variables:          [S(t), In(t), Dd(t), A(t), R(t), Tt(t), Hh(t), E(t)]
Output variables:         [y1(t)]
Input variables:          []
Parameters in equations:  [a, b, dlt, eps, eta, g, kappa, ksi, lam, mu, nu, rho, sgm, ta, th, zeta]
===================


=======================================================
1. Constructing the maximal polynomial system
=======================================================

=======================================================
2. Truncating the polynomial system based on the Jacobian condition
=======================================================

=======================================================
3. Assessing local identifiability
=======================================================
Locally identifiable paramters:  [Dd(0)]
Nonidentifiable parameter:  [A(0), E(0), Hh(0), In(0), R(0), S(0), Tt(0), a, b, dlt, eps, eta, g, kappa, ksi, lam, mu, nu, rho, sgm, ta, th, zeta]
No algebraically independent parameters found.

=======================================================
4. Randomizing the truncated system
=======================================================
States for substitution:	[kappa = 2, In_ = 1, th = 1, g = 2, rho = 1, ta = 1, Dd_ = 0, mu = 1, Tt_ = 0, eta = 2, a = 2, lam = 2, b = 2, sgm = 1, zeta = 2, S_ = 2, eps = 1, nu = 2, R_ = 0, A_ = 1, ksi = 1, dlt = 2]
NonID parameters:	[A_0, E_0, Hh_0, In_0, R_0, S_0, Tt_0, a, b, dlt, eps, eta, g, kappa, ksi, lam, mu, nu, rho, sgm, ta, th, zeta]
Substitutions:	[In_ = 2, z_aux = 2, Dd_ = 1, Tt_ = 1, S_ = 3, R_ = 1, A_ = 2]
memory used=8256.8MB, alloc=179.8MB, time=41.30
