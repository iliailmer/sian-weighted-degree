    |\^/|     Maple 2021 (X86 64 LINUX)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2021
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
# Ex 34 from  https://arxiv.org/abs/2006.14295
> kernelopts(printbytes=false, assertlevel=1):
> interface(echo=0, prettyprint=0):
Warning, (in GetPolySystem) `prep_cpu_start` is implicitly declared local
|imports/generate_poly_system.mpl:22|
Warning, (in GetPolySystem) `prep_real_start` is implicitly declared local
|imports/generate_poly_system.mpl:23|
Warning, (in GetPolySystem) `denom_` is implicitly declared local
|imports/generate_poly_system.mpl:326|
Warning, (in GetPolySystem) `roll` is implicitly declared local
|imports/generate_poly_system.mpl:419|
Warning, (in GetPolySystem) `alg_indep_hat` is implicitly declared local
|imports/generate_poly_system.mpl:420|
Warning, (in GetPolySystem) `prep_cpu_finish` is implicitly declared local
|imports/generate_poly_system.mpl:447|
Warning, (in GetPolySystem) `prep_real_finish` is implicitly declared local
|imports/generate_poly_system.mpl:448|
Warning, (in generate_graph_from_eqs) `new_verts` is implicitly declared local
|imports/generate_poly_system.mpl:519|
Warning, (in GetPolySystem) `prep_cpu_start` is implicitly declared local
|imports/generate_poly_system.mpl:22|
Warning, (in GetPolySystem) `prep_real_start` is implicitly declared local
|imports/generate_poly_system.mpl:23|
Warning, (in GetPolySystem) `denom_` is implicitly declared local
|imports/generate_poly_system.mpl:326|
Warning, (in GetPolySystem) `roll` is implicitly declared local
|imports/generate_poly_system.mpl:419|
Warning, (in GetPolySystem) `alg_indep_hat` is implicitly declared local
|imports/generate_poly_system.mpl:420|
Warning, (in GetPolySystem) `prep_cpu_finish` is implicitly declared local
|imports/generate_poly_system.mpl:447|
Warning, (in GetPolySystem) `prep_real_finish` is implicitly declared local
|imports/generate_poly_system.mpl:448|
Warning, (in generate_graph_from_eqs) `new_verts` is implicitly declared local
|imports/generate_poly_system.mpl:519|
Warning, (in GetPolySystem) `prep_cpu_start` is implicitly declared local
|imports/generate_poly_system.mpl:22|
Warning, (in GetPolySystem) `prep_real_start` is implicitly declared local
|imports/generate_poly_system.mpl:23|
Warning, (in GetPolySystem) `denom_` is implicitly declared local
|imports/generate_poly_system.mpl:326|
Warning, (in GetPolySystem) `roll` is implicitly declared local
|imports/generate_poly_system.mpl:419|
Warning, (in GetPolySystem) `alg_indep_hat` is implicitly declared local
|imports/generate_poly_system.mpl:420|
Warning, (in GetPolySystem) `prep_cpu_finish` is implicitly declared local
|imports/generate_poly_system.mpl:447|
Warning, (in GetPolySystem) `prep_real_finish` is implicitly declared local
|imports/generate_poly_system.mpl:448|
Warning, (in generate_graph_from_eqs) `new_verts` is implicitly declared local
|imports/generate_poly_system.mpl:519|
Warning, (in GetPolySystem) `prep_cpu_start` is implicitly declared local
|imports/generate_poly_system.mpl:22|
Warning, (in GetPolySystem) `prep_real_start` is implicitly declared local
|imports/generate_poly_system.mpl:23|
Warning, (in GetPolySystem) `denom_` is implicitly declared local
|imports/generate_poly_system.mpl:326|
Warning, (in GetPolySystem) `roll` is implicitly declared local
|imports/generate_poly_system.mpl:419|
Warning, (in GetPolySystem) `alg_indep_hat` is implicitly declared local
|imports/generate_poly_system.mpl:420|
Warning, (in GetPolySystem) `prep_cpu_finish` is implicitly declared local
|imports/generate_poly_system.mpl:447|
Warning, (in GetPolySystem) `prep_real_finish` is implicitly declared local
|imports/generate_poly_system.mpl:448|
Warning, (in generate_graph_from_eqs) `new_verts` is implicitly declared local
|imports/generate_poly_system.mpl:519|
Warning, (in SubsByDepth) `out` is implicitly declared local
|imports/create_substitutions.mpl:53|
Warning, (in SubsByDepth) `mem` is implicitly declared local
|imports/create_substitutions.mpl:53|
Warning, (in SubsByDepth) `cpu_time` is implicitly declared local
|imports/create_substitutions.mpl:53|
Warning, (in SubsByDepth) `real_time` is implicitly declared local
|imports/create_substitutions.mpl:53|
Warning, (in WriteScripts) `weights` is implicitly declared local
|imports/create_substitutions.mpl:111|
Warning, (in WriteScripts) `max_degree` is implicitly declared local
|imports/create_substitutions.mpl:112|
Warning, (in WriteScripts) `new_weights` is implicitly declared local
|imports/create_substitutions.mpl:113|
Warning, (in WriteScripts) `each` is implicitly declared local
|imports/create_substitutions.mpl:113|

=======================================================
0. Extracting states, inputs, outputs, and parameters from the system
=======================================================

=== Input info ===
State variables:          [s(t), e(t), i(t), r(t)]
Output variables:         [y1(t)]
Input variables:          []
Parameters in equations:  [Lam, b, eps, g, mu, n, r0]
===================


=======================================================
1. Constructing the maximal polynomial system
=======================================================

=======================================================
2. Truncating the polynomial system based on the Jacobian condition
=======================================================

=======================================================
3. Assessing local identifiability
=======================================================

=======================================================
Creating Truncated system (old)
=======================================================
Locally identifiable paramters:  [eps, g, mu, e(0), i(0), r(0)]
Nonidentifiable parameter:  [Lam, b, n, r0, s(0)]

=======================================================
Substituting transcendence basis.
=======================================================
Algebraically independent parameters {Lam, b}
Number of possible combinations 66
Collection [Lam, r0] is not transcendence basis
Collection [Lam, s_0] is not transcendence basis
Collection [Lam, s_1] is not transcendence basis
Collection [Lam, s_2] is not transcendence basis
Collection [Lam, s_3] is not transcendence basis
Collection [Lam, s_4] is not transcendence basis
Collection [Lam, s_5] is not transcendence basis
Collection [Lam, s_6] is not transcendence basis
Collection [Lam, s_7] is not transcendence basis
Collection [r0, s_0] is not transcendence basis
Collection [r0, s_1] is not transcendence basis
Collection [r0, s_2] is not transcendence basis
Collection [r0, s_3] is not transcendence basis
Collection [r0, s_4] is not transcendence basis
Collection [r0, s_5] is not transcendence basis
Collection [r0, s_6] is not transcendence basis
Collection [r0, s_7] is not transcendence basis
Collection [s_0, s_1] is not transcendence basis
Collection [s_0, s_2] is not transcendence basis
Collection [s_0, s_3] is not transcendence basis
Collection [s_0, s_4] is not transcendence basis
Collection [s_0, s_5] is not transcendence basis
Collection [s_0, s_6] is not transcendence basis
Collection [s_0, s_7] is not transcendence basis
Collection [s_1, s_2] is not transcendence basis
Collection [s_1, s_3] is not transcendence basis
Collection [s_1, s_4] is not transcendence basis
Collection [s_1, s_5] is not transcendence basis
Collection [s_1, s_6] is not transcendence basis
Collection [s_1, s_7] is not transcendence basis
Collection [s_2, s_3] is not transcendence basis
Collection [s_2, s_4] is not transcendence basis
Collection [s_2, s_5] is not transcendence basis
Collection [s_2, s_6] is not transcendence basis
Collection [s_2, s_7] is not transcendence basis
Collection [s_3, s_4] is not transcendence basis
Collection [s_3, s_5] is not transcendence basis
Collection [s_3, s_6] is not transcendence basis
Collection [s_3, s_7] is not transcendence basis
Collection [s_4, s_5] is not transcendence basis
Collection [s_4, s_6] is not transcendence basis
Collection [s_4, s_7] is not transcendence basis
Collection [s_5, s_6] is not transcendence basis
Collection [s_5, s_7] is not transcendence basis
Collection [s_6, s_7] is not transcendence basis
Picked the best choice [b, n] based on heuristic:

=======================================================
4. Randomizing the truncated system
=======================================================
Prep CPU Time (sub_transc=true):	 9.419
Prep Real Elapsed Time (sub_transc=true):	 8.995
memory used=0.93GiB, alloc change=72.00MiB, cpu time=9.44s, real time=9.02s, gc time=1.09s


GetPolySystem Usage (real, cpu, memory):	9.019 	9.443 	1001913008

States for substitution:	[Lam = 3, eps = 1, b = 2, mu = 1, r0 = 3, g = 3, n = 2, r_ = 0, i_ = 0, s_ = 2, e_ = 1]
NonID parameters:	[Lam, b, n, r0, s_0]
Substitutions:	[g = 4, z_aux = 3, r_ = 1, i_ = 1, s_ = 3, e_ = 2]
memory used=0.94GiB, alloc change=72.00MiB, cpu time=9.52s, real time=9.10s, gc time=1.09s
all_subs, system_vars[1], system_vars[2], alg_indep, original_et_hat := {e_0 =
e_0^2, e_1 = e_1^2, e_2 = e_2^2, e_3 = e_3^2, e_4 = e_4^2, e_5 = e_5^2, e_6 = 
e_6^2, e_7 = e_7^2, e_8 = e_8^2, g = g^4, i_0 = i_0, i_1 = i_1, i_2 = i_2, i_3
= i_3, i_4 = i_4, i_5 = i_5, i_6 = i_6, i_7 = i_7, i_8 = i_8, i_9 = i_9, r_0 =
r_0, r_1 = r_1, r_2 = r_2, r_3 = r_3, r_4 = r_4, r_5 = r_5, r_6 = r_6, r_7 = 
r_7, r_8 = r_8, r_9 = r_9, s_0 = s_0^3, s_1 = s_1^3, s_2 = s_2^3, s_3 = s_3^3,
s_4 = s_4^3, s_5 = s_5^3, s_6 = s_6^3, s_7 = s_7^3, z_aux = z_aux^3}, [
19037781639698745281-i_0-r_0, g^4*i_0-e_0^2*eps+i_0*mu+i_1, -g^4*i_0+mu*r_0+r_1
, -i_1-r_1-79800528741062670215760557734729700624, -e_1^2*eps+(g^4+mu)*i_1+i_2,
-g^4*i_1+mu*r_1+r_2, -10397145104537945603*i_0*s_0^3+4093542239589122892*e_0^2*
eps+4093542239589122892*e_0^2*mu+4093542239589122892*e_1^2, -i_2-r_2+
1790001264713492971351337258912512877404967870068467920158742649257617525208/
962021568860353537, -e_2^2*eps+(g^4+mu)*i_2+i_3, -g^4*i_2+mu*r_2+r_3, 
4093542239589122892*(mu+eps)*e_1^2+4093542239589122892*e_2^2-\
10397145104537945603*i_0*s_1^3-10397145104537945603*i_1*s_0^3, 
10397145104537945603*i_0*r0*s_0^3+4093542239589122892*mu*s_0^3+
4093542239589122892*s_1^3-4093542239589122892*Lam, -i_3-r_3-2499743704634044286\
9332761795950637906434708676349966695554364738981543037209954955561936768992396\
676867502419824637883858678448392/48709763102765049586230538980442651, -e_3^2*
eps+(g^4+mu)*i_3+i_4, -g^4*i_3+mu*r_3+r_4, -10397145104537945603*i_0*s_2^3-\
20794290209075891206*i_1*s_1^3-10397145104537945603*i_2*s_0^3+
4093542239589122892*(mu+eps)*e_2^2+4093542239589122892*e_3^2, 
10397145104537945603*(i_0*s_1^3+i_1*s_0^3)*r0+4093542239589122892*mu*s_1^3+
4093542239589122892*s_2^3, -i_4-r_4+5558124709994507364597398739398938910320051\
3432358644807786862233855097573362680310490503032910943199173522690011396552214\
75883923870443844176028152899154257811203178931727203177325302006/
46859842718938195110439259210944391158336976613506587, -e_4^2*eps+(g^4+mu)*i_4+
i_5, -g^4*i_4+mu*r_4+r_5, -10397145104537945603*s_3^3*i_0-31191435313613836809*
s_2^3*i_1-31191435313613836809*s_1^3*i_2-10397145104537945603*i_3*s_0^3+
4093542239589122892*(mu+eps)*e_3^2+4093542239589122892*e_4^2, 
10397145104537945603*(i_0*s_2^3+2*i_1*s_1^3+i_2*s_0^3)*r0+4093542239589122892*
mu*s_2^3+4093542239589122892*s_3^3, -i_5-r_5-3423370380505626197026082243280594\
7933060038052007176665388221473403252424869223051589743714176741846904374409380\
0466143392987571166505074190316479239774610254515020397159117855811366524152460\
8474581021908191719625423864058822259422360616166/
124875843238289022664091086876824621132256261932109921527382521047779, -e_5^2*
eps+(g^4+mu)*i_5+i_6, -g^4*i_5+mu*r_5+r_6, -10397145104537945603*i_0*s_4^3-\
41588580418151782412*i_1*s_3^3-62382870627227673618*i_2*s_2^3-\
41588580418151782412*i_3*s_1^3-10397145104537945603*i_4*s_0^3+
4093542239589122892*(mu+eps)*e_4^2+4093542239589122892*e_5^2, 
31191435313613836809*(s_1^3*i_2+s_2^3*i_1+1/3*s_3^3*i_0+1/3*i_3*s_0^3)*r0+
4093542239589122892*mu*s_3^3+4093542239589122892*s_4^3, -i_6-r_6+14462397480729\
1993393070465867002470895636973170271568195836241554431132503493239282705717219\
0826318313238359407856256672324037926918276745118373514491241165735743247148987\
3537065568565517029298916425506678585341714113981093710937100691400940918399789\
668675334278052782604913800161363705129210802900/228253183787230915609190284421\
8428512978879561429805603996555541168013665825206564242137, -e_6^2*eps+(g^4+mu)
*i_6+i_7, -g^4*i_6+mu*r_6+r_7, -10397145104537945603*i_0*s_5^3-\
51985725522689728015*i_1*s_4^3-103971451045379456030*i_2*s_3^3-\
103971451045379456030*i_3*s_2^3-51985725522689728015*i_4*s_1^3-\
10397145104537945603*i_5*s_0^3+4093542239589122892*(mu+eps)*e_5^2+
4093542239589122892*e_6^2, 10397145104537945603*(i_0*s_4^3+4*i_1*s_3^3+6*i_2*
s_2^3+4*i_3*s_1^3+i_4*s_0^3)*r0+4093542239589122892*mu*s_4^3+
4093542239589122892*s_5^3, -i_7-r_7-1692464219945242389521243403810383146590838\
4039410670498745156765270385073234681686965258078516469721387577797118805648760\
4129130690567759307489830079229807652140912066927092829379735143967604285065097\
3877625214149438993961619464155724848349019406873874141732493824804724642167255\
07850076091220242155346625887789914298642618765823015724932150814183588228/1155\
7078208650657779751794016314873903344921254173070242447870825970520810018120534\
2798203142745068020451, -e_7^2*eps+(g^4+mu)*i_7+i_8, -g^4*i_7+mu*r_7+r_8, -\
10397145104537945603*s_6^3*i_0-62382870627227673618*s_5^3*i_1-\
155957176568069184045*s_4^3*i_2-207942902090758912060*s_3^3*i_3-\
155957176568069184045*s_2^3*i_4-62382870627227673618*i_5*s_1^3-\
10397145104537945603*i_6*s_0^3+4093542239589122892*(mu+eps)*e_6^2+
4093542239589122892*e_7^2, 10397145104537945603*(i_0*s_5^3+5*i_1*s_4^3+10*i_2*
s_3^3+10*i_3*s_2^3+5*i_4*s_1^3+i_5*s_0^3)*r0+4093542239589122892*mu*s_5^3+
4093542239589122892*s_6^3, -i_8-r_8+3763156672510304078190326920020300908862882\
8005560674827426842192546367069107922128473249962722734983422372258140473959247\
5035152094478468604642703520416898031816100856272951600452025755391600496382029\
1463675936017637117585549052970580291023472878515546839116083558630012043062487\
3876139766332504881805363356067670087863263434269873761956361914775584003853042\
812376985534776334914106246083289426028161356491770/111181585097279100757064369\
4857427553825009905822790271002811784350108875467311146143206552525658697124061\
62247868606185187, -e_8^2*eps+(g^4+mu)*i_8+i_9, -g^4*i_8+mu*r_8+r_9, -\
10397145104537945603*s_7^3*i_0-72780015731765619221*s_6^3*i_1-\
218340047195296857663*s_5^3*i_2-363900078658828096105*s_4^3*i_3-\
363900078658828096105*s_3^3*i_4-218340047195296857663*i_5*s_2^3-\
72780015731765619221*i_6*s_1^3-10397145104537945603*i_7*s_0^3+
4093542239589122892*(mu+eps)*e_7^2+4093542239589122892*e_8^2, 
62382870627227673618*(i_5*s_1^3+1/6*i_6*s_0^3+5/2*s_2^3*i_4+10/3*s_3^3*i_3+5/2*
s_4^3*i_2+s_5^3*i_1+1/6*s_6^3*i_0)*r0+4093542239589122892*mu*s_6^3+
4093542239589122892*s_7^3, -i_9-r_9-2317810369873225948442073475141493872140297\
4301049627200756583379171889988339643088488042687110435700759047194964424880457\
6738418822758120935644627952049959861397160951535039489119029901538774313495852\
3725794122697714109233437889721509892617857596441716833941486498415482960196492\
7412887789588911757530590062455296033737250940768056141411430625527463633381029\
3771944099956668612946320750159147951322276353947965899544251969663010568895465\
64599468180288957826839626/2962855482650009502261817596180756432173066298808249\
8010524776455840090220461961742381118910593911524297883543242874141495213893601\
5823979, n*z_aux^3-1], [r_9, i_9, r_8, i_8, e_8, s_7, r_7, i_7, e_7, s_6, r_6,
i_6, e_6, s_5, r_5, i_5, e_5, s_4, r_4, i_4, e_4, s_3, r_3, i_3, e_3, s_2, r_2,
i_2, e_2, s_1, r_1, i_1, e_1, s_0, r_0, i_0, e_0, z_aux, w_aux, Lam, b, eps, g,
mu, n, r0], [b, n], [19037781639698745281-i_0-r_0, -e_0*eps+g*i_0+i_0*mu+i_1, -
g*i_0+mu*r_0+r_1, -i_1-r_1-79800528741062670215760557734729700624, -e_1*eps+(g+
mu)*i_1+i_2, -g*i_1+mu*r_1+r_2, 4093542239589122892*e_0*eps+4093542239589122892
*e_0*mu-10397145104537945603*i_0*s_0+4093542239589122892*e_1, -i_2-r_2+
1790001264713492971351337258912512877404967870068467920158742649257617525208/
962021568860353537, -e_2*eps+(g+mu)*i_2+i_3, -g*i_2+mu*r_2+r_3, 
4093542239589122892*(mu+eps)*e_1+4093542239589122892*e_2-10397145104537945603*
i_0*s_1-10397145104537945603*i_1*s_0, 10397145104537945603*i_0*r0*s_0+
4093542239589122892*mu*s_0-4093542239589122892*Lam+4093542239589122892*s_1, -
i_3-r_3-24997437046340442869332761795950637906434708676349966695554364738981543\
037209954955561936768992396676867502419824637883858678448392/
48709763102765049586230538980442651, -e_3*eps+(g+mu)*i_3+i_4, -g*i_3+mu*r_3+r_4
, -10397145104537945603*i_0*s_2-20794290209075891206*i_1*s_1-\
10397145104537945603*i_2*s_0+4093542239589122892*(mu+eps)*e_2+
4093542239589122892*e_3, 10397145104537945603*(i_0*s_1+i_1*s_0)*r0+
4093542239589122892*mu*s_1+4093542239589122892*s_2, -i_4-r_4+555812470999450736\
4597398739398938910320051343235864480778686223385509757336268031049050303291094\
3199173522690011396552214758839238704438441760281528991542578112031789317272031\
77325302006/46859842718938195110439259210944391158336976613506587, -e_4*eps+(g+
mu)*i_4+i_5, -g*i_4+mu*r_4+r_5, -10397145104537945603*s_3*i_0-\
31191435313613836809*s_2*i_1-31191435313613836809*s_1*i_2-10397145104537945603*
i_3*s_0+4093542239589122892*(mu+eps)*e_3+4093542239589122892*e_4, 
10397145104537945603*(i_0*s_2+2*i_1*s_1+i_2*s_0)*r0+4093542239589122892*mu*s_2+
4093542239589122892*s_3, -i_5-r_5-342337038050562619702608224328059479330600380\
5200717666538822147340325242486922305158974371417674184690437440938004661433929\
8757116650507419031647923977461025451502039715911785581136652415246084745810219\
08191719625423864058822259422360616166/
124875843238289022664091086876824621132256261932109921527382521047779, -e_5*eps
+(g+mu)*i_5+i_6, -g*i_5+mu*r_5+r_6, -10397145104537945603*i_0*s_4-\
41588580418151782412*i_1*s_3-62382870627227673618*i_2*s_2-41588580418151782412*
i_3*s_1-10397145104537945603*i_4*s_0+4093542239589122892*(mu+eps)*e_4+
4093542239589122892*e_5, 31191435313613836809*(s_1*i_2+s_2*i_1+1/3*s_3*i_0+1/3*
i_3*s_0)*r0+4093542239589122892*mu*s_3+4093542239589122892*s_4, -i_6-r_6+144623\
9748072919933930704658670024708956369731702715681958362415544311325034932392827\
0571721908263183132383594078562566723240379269182767451183735144912411657357432\
4714898735370655685655170292989164255066785853417141139810937109371006914009409\
18399789668675334278052782604913800161363705129210802900/2282531837872309156091\
902844218428512978879561429805603996555541168013665825206564242137, -e_6*eps+(g
+mu)*i_6+i_7, -g*i_6+mu*r_6+r_7, -10397145104537945603*i_0*s_5-\
51985725522689728015*i_1*s_4-103971451045379456030*i_2*s_3-\
103971451045379456030*i_3*s_2-51985725522689728015*i_4*s_1-10397145104537945603
*i_5*s_0+4093542239589122892*(mu+eps)*e_5+4093542239589122892*e_6, 
10397145104537945603*(i_0*s_4+4*i_1*s_3+6*i_2*s_2+4*i_3*s_1+i_4*s_0)*r0+
4093542239589122892*mu*s_4+4093542239589122892*s_5, -i_7-r_7-169246421994524238\
9521243403810383146590838403941067049874515676527038507323468168696525807851646\
9721387577797118805648760412913069056775930748983007922980765214091206692709282\
9379735143967604285065097387762521414943899396161946415572484834901940687387414\
1732493824804724642167255078500760912202421553466258877899142986426187658230157\
24932150814183588228/1155707820865065777975179401631487390334492125417307024244\
78708259705208100181205342798203142745068020451, -e_7*eps+(g+mu)*i_7+i_8, -g*
i_7+mu*r_7+r_8, -10397145104537945603*s_6*i_0-62382870627227673618*s_5*i_1-\
155957176568069184045*s_4*i_2-207942902090758912060*s_3*i_3-\
155957176568069184045*s_2*i_4-62382870627227673618*i_5*s_1-10397145104537945603
*i_6*s_0+4093542239589122892*(mu+eps)*e_6+4093542239589122892*e_7, 
10397145104537945603*(i_0*s_5+5*i_1*s_4+10*i_2*s_3+10*i_3*s_2+5*i_4*s_1+i_5*s_0
)*r0+4093542239589122892*mu*s_5+4093542239589122892*s_6, -i_8-r_8+3763156672510\
3040781903269200203009088628828005560674827426842192546367069107922128473249962\
7227349834223722581404739592475035152094478468604642703520416898031816100856272\
9516004520257553916004963820291463675936017637117585549052970580291023472878515\
5468391160835586300120430624873876139766332504881805363356067670087863263434269\
8737619563619147755840038530428123769855347763349141062460832894260281613564917\
70/1111815850972791007570643694857427553825009905822790271002811784350108875467\
31114614320655252565869712406162247868606185187, -e_8*eps+(g+mu)*i_8+i_9, -g*
i_8+mu*r_8+r_9, -10397145104537945603*s_7*i_0-72780015731765619221*s_6*i_1-\
218340047195296857663*s_5*i_2-363900078658828096105*s_4*i_3-\
363900078658828096105*s_3*i_4-218340047195296857663*i_5*s_2-\
72780015731765619221*i_6*s_1-10397145104537945603*i_7*s_0+4093542239589122892*(
mu+eps)*e_7+4093542239589122892*e_8, 62382870627227673618*(i_5*s_1+1/6*i_6*s_0+
5/2*s_2*i_4+10/3*s_3*i_3+5/2*s_4*i_2+s_5*i_1+1/6*s_6*i_0)*r0+
4093542239589122892*mu*s_6+4093542239589122892*s_7, -i_9-r_9-231781036987322594\
8442073475141493872140297430104962720075658337917188998833964308848804268711043\
5700759047194964424880457673841882275812093564462795204995986139716095153503948\
9119029901538774313495852372579412269771410923343788972150989261785759644171683\
3941486498415482960196492741288778958891175753059006245529603373725094076805614\
1411430625527463633381029377194409995666861294632075015914795132227635394796589\
954425196966301056889546564599468180288957826839626/296285548265000950226181759\
6180756432173066298808249801052477645584009022046196174238111891059391152429788\
35432428741414952138936015823979, n*z_aux-1]

SubsByDepth Usage (real, cpu, memory):	9.101 	9.525 	1006686376


=======================================================
0. Extracting states, inputs, outputs, and parameters from the system
=======================================================

=== Input info ===
State variables:          [s(t), e(t), i(t), r(t)]
Output variables:         [y1(t)]
Input variables:          []
Parameters in equations:  [Lam, b, eps, g, mu, n, r0]
===================


=======================================================
1. Constructing the maximal polynomial system
=======================================================

=======================================================
2. Truncating the polynomial system based on the Jacobian condition
=======================================================

=======================================================
3. Assessing local identifiability
=======================================================

=======================================================
Creating Truncated system (old)
=======================================================
Locally identifiable paramters:  [eps, g, mu, e(0), i(0), r(0)]
Nonidentifiable parameter:  [Lam, b, n, r0, s(0)]

=======================================================
4. Randomizing the truncated system
=======================================================
Prep CPU Time (sub_transc=false):	 1.916
Prep Real Elapsed Time (sub_transc=false):	 1.826
memory used=252.60MiB, alloc change=0 bytes, cpu time=1.92s, real time=1.83s, gc time=192.36ms


GetPolySystem Usage (real, cpu, memory):	1.827 	1.916 	264873064

States for substitution:	[Lam = 3, eps = 1, b = 2, mu = 1, r0 = 3, g = 3, n = 2, r_ = 0, i_ = 0, s_ = 2, e_ = 1]
NonID parameters:	[Lam, b, n, r0, s_0]
Substitutions:	[g = 4, z_aux = 3, r_ = 1, i_ = 1, s_ = 3, e_ = 2]
memory used=256.48MiB, alloc change=0 bytes, cpu time=1.96s, real time=1.87s, gc time=192.36ms
all_subs, system_vars[1], system_vars[2], alg_indep, original_et_hat := {e_0 =
e_0^2, e_1 = e_1^2, e_2 = e_2^2, e_3 = e_3^2, e_4 = e_4^2, e_5 = e_5^2, e_6 = 
e_6^2, e_7 = e_7^2, e_8 = e_8^2, g = g^4, i_0 = i_0, i_1 = i_1, i_2 = i_2, i_3
= i_3, i_4 = i_4, i_5 = i_5, i_6 = i_6, i_7 = i_7, i_8 = i_8, i_9 = i_9, r_0 =
r_0, r_1 = r_1, r_2 = r_2, r_3 = r_3, r_4 = r_4, r_5 = r_5, r_6 = r_6, r_7 = 
r_7, r_8 = r_8, r_9 = r_9, s_0 = s_0^3, s_1 = s_1^3, s_2 = s_2^3, s_3 = s_3^3,
s_4 = s_4^3, s_5 = s_5^3, s_6 = s_6^3, s_7 = s_7^3, z_aux = z_aux^3}, [
5719223271691505190-i_0-r_0, g^4*i_0-e_0^2*eps+i_0*mu+i_1, -g^4*i_0+mu*r_0+r_1,
-i_1-r_1+30948978013516866552297196653037097642, -e_1^2*eps+(g^4+mu)*i_1+i_2, -
g^4*i_1+mu*r_1+r_2, -b*i_0*s_0^3+e_0^2*eps*n+e_0^2*mu*n+e_1^2*n, -i_2-r_2-\
229220534837698301610109042266985982107697787658604346365722854204717138026/
737792555528107209, -e_2^2*eps+(g^4+mu)*i_2+i_3, -g^4*i_2+mu*r_2+r_3, ((mu+eps)
*e_1^2+e_2^2)*n-b*(i_0*s_1^3+i_1*s_0^3), b*i_0*r0*s_0^3+mu*n*s_0^3+n*s_1^3-Lam*
n, -i_3-r_3-2859917858398321518047740750953541057659581308553370042553134825759\
017448444326343996193386179318446779660040766378310057565001678/
2721689274963475796814776070988848405, -e_3^2*eps+(g^4+mu)*i_3+i_4, -g^4*i_3+mu
*r_3+r_4, (-i_0*s_2^3-2*i_1*s_1^3-i_2*s_0^3)*b+((mu+eps)*e_2^2+e_3^2)*n, b*(i_0
*s_1^3+i_1*s_0^3)*r0+n*(mu*s_1^3+s_2^3), -i_4-r_4+34137597217819753562519865259\
1976031264350990381865482302309044251515859067955779835418163789198562894475148\
22987101776586769136055842956899476948591734111713545816052511045374840011854/
2008042085528744066578829279162626322042531376288651645, -e_4^2*eps+(g^4+mu)*
i_4+i_5, -g^4*i_4+mu*r_4+r_5, (-i_0*s_3^3-3*i_1*s_2^3-3*i_2*s_1^3-i_3*s_0^3)*b+
((mu+eps)*e_3^2+e_4^2)*n, b*(i_0*s_2^3+2*i_1*s_1^3+i_2*s_0^3)*r0+n*(mu*s_2^3+
s_3^3), -i_5-r_5-20374283484819315824311595419688445472730700887475710896685549\
9600550822292906344373065019429965558252682683991312943047022076867121583016549\
3671246068210372025633879183034690174226083720202620272011034865204801425962688\
305966347063067160422/
7407592509451210560827044405292290218780342434117435695481157868071044025, -e_5
^2*eps+(g^4+mu)*i_5+i_6, -g^4*i_5+mu*r_5+r_6, (-i_0*s_4^3-4*i_1*s_3^3-6*i_2*s_2
^3-4*i_3*s_1^3-i_4*s_0^3)*b+((mu+eps)*e_4^2+e_5^2)*n, 3*b*(s_1^3*i_2+s_2^3*i_1+
1/3*s_3^3*i_0+1/3*i_3*s_0^3)*r0+n*(mu*s_3^3+s_4^3), -i_6-r_6+243198972013820490\
2402068584399465367718175119815909906748725891448370904902477077426004793622548\
9264190407401484640031161836399177258836564984581650530936314012637311367735327\
2340968671468656558171172624617482632313426440594499763258344644113147498944238\
03089024095402207493169289618456031440102/5465266607858873293091152935828749474\
913434044900508078763270761220016686517623148758876225, -e_6^2*eps+(g^4+mu)*i_6
+i_7, -g^4*i_6+mu*r_6+r_7, (-i_0*s_5^3-5*i_1*s_4^3-10*i_2*s_3^3-10*i_3*s_2^3-5*
i_4*s_1^3-i_5*s_0^3)*b+((mu+eps)*e_5^2+e_6^2)*n, b*(i_0*s_4^3+4*i_1*s_3^3+6*i_2
*s_2^3+4*i_3*s_1^3+i_4*s_0^3)*r0+n*(mu*s_4^3+s_5^3), -i_7-r_7-14514802454930002\
4231943873345967996838458152281631927151578260561065852672110500624688305031727\
6294968847128638808074655570607253445222791370637693867292183775922859018131375\
8992677023928297045726617280758876906755111490902248753892128570654006178700690\
5167093913985604299773232643872397360674827561972064760158850614852880293548355\
9696134723318075102/20161165086273139505241163065599259385419839474839398731434\
413896174670608538398413501031296881734060806030125, -e_7^2*eps+(g^4+mu)*i_7+
i_8, -g^4*i_7+mu*r_7+r_8, (-i_0*s_6^3-6*i_1*s_5^3-15*i_2*s_4^3-20*i_3*s_3^3-15*
i_4*s_2^3-6*i_5*s_1^3-i_6*s_0^3)*b+((mu+eps)*e_6^2+e_7^2)*n, b*(i_0*s_5^3+5*i_1
*s_4^3+10*i_2*s_3^3+10*i_3*s_2^3+5*i_4*s_1^3+i_5*s_0^3)*r0+n*(mu*s_5^3+s_6^3),
-i_8-r_8+6930275685332076124620268513961356275276429304646958934689713345263392\
9544769658446683325813753672741419729103142453997708588848234660759241986045791\
3634131691848464100067703613468023813282327161436445028916139879359547370036354\
1897346916377002137897082398296627671004094499574941202078045261944655988488010\
2285794525915033189502514966427846707256623214252025555305155519397004217011861\
1831850872262583054/59499030045702046589373062020482646746256567601330979692056\
8625227287353752662834106976701245815826494818772130529129387346845, -e_8^2*eps
+(g^4+mu)*i_8+i_9, -g^4*i_8+mu*r_8+r_9, (-i_0*s_7^3-7*i_1*s_6^3-21*i_2*s_5^3-35
*i_3*s_4^3-35*i_4*s_3^3-21*i_5*s_2^3-7*i_6*s_1^3-i_7*s_0^3)*b+((mu+eps)*e_7^2+
e_8^2)*n, 6*b*(i_5*s_1^3+1/6*i_6*s_0^3+5/2*s_2^3*i_4+10/3*s_3^3*i_3+5/2*s_4^3*
i_2+s_5^3*i_1+1/6*s_6^3*i_0)*r0+n*(mu*s_6^3+s_7^3), -i_9-r_9-103404613204001653\
4869111286679432762636391043366235641181729245255650520281080982469987849921422\
6593917260431916723728447521982365626544333118081772289839797948272402328809927\
8316752166422582547915054675731449835448028096722746016080246651912532024089938\
9872497170692156890566152460237498834208986589631985136381864124171349164573808\
6819820472575150087017756554432165484421683217866712347899809087849397728146894\
57601140713770892750064245938323930334165196911798/5487242678607768302193179693\
2708913899380076377768365026893092720419510475764458182580241171985951851500456\
901294109322909616957211324653488200625, n*z_aux^3-1], [r_9, i_9, r_8, i_8, e_8
, s_7, r_7, i_7, e_7, s_6, r_6, i_6, e_6, s_5, r_5, i_5, e_5, s_4, r_4, i_4, 
e_4, s_3, r_3, i_3, e_3, s_2, r_2, i_2, e_2, s_1, r_1, i_1, e_1, s_0, r_0, i_0,
e_0, z_aux, w_aux, Lam, b, eps, g, mu, n, r0], [], [5719223271691505190-i_0-r_0
, -e_0*eps+g*i_0+i_0*mu+i_1, -g*i_0+mu*r_0+r_1, -i_1-r_1+
30948978013516866552297196653037097642, -e_1*eps+(g+mu)*i_1+i_2, -g*i_1+mu*r_1+
r_2, -b*i_0*s_0+e_0*eps*n+e_0*mu*n+e_1*n, -i_2-r_2-\
229220534837698301610109042266985982107697787658604346365722854204717138026/
737792555528107209, -e_2*eps+(g+mu)*i_2+i_3, -g*i_2+mu*r_2+r_3, ((mu+eps)*e_1+
e_2)*n-b*(i_0*s_1+i_1*s_0), b*i_0*r0*s_0+mu*n*s_0-Lam*n+n*s_1, -i_3-r_3-2859917\
8583983215180477407509535410576595813085533700425531348257590174484443263439961\
93386179318446779660040766378310057565001678/
2721689274963475796814776070988848405, -e_3*eps+(g+mu)*i_3+i_4, -g*i_3+mu*r_3+
r_4, (-i_0*s_2-2*i_1*s_1-i_2*s_0)*b+((mu+eps)*e_2+e_3)*n, b*(i_0*s_1+i_1*s_0)*
r0+n*(mu*s_1+s_2), -i_4-r_4+341375972178197535625198652591976031264350990381865\
4823023090442515158590679557798354181637891985628944751482298710177658676913605\
5842956899476948591734111713545816052511045374840011854/
2008042085528744066578829279162626322042531376288651645, -e_4*eps+(g+mu)*i_4+
i_5, -g*i_4+mu*r_4+r_5, (-i_0*s_3-3*i_1*s_2-3*i_2*s_1-i_3*s_0)*b+((mu+eps)*e_3+
e_4)*n, b*(i_0*s_2+2*i_1*s_1+i_2*s_0)*r0+n*(mu*s_2+s_3), -i_5-r_5-2037428348481\
9315824311595419688445472730700887475710896685549960055082229290634437306501942\
9965558252682683991312943047022076867121583016549367124606821037202563387918303\
4690174226083720202620272011034865204801425962688305966347063067160422/
7407592509451210560827044405292290218780342434117435695481157868071044025, -e_5
*eps+(g+mu)*i_5+i_6, -g*i_5+mu*r_5+r_6, (-i_0*s_4-4*i_1*s_3-6*i_2*s_2-4*i_3*s_1
-i_4*s_0)*b+((mu+eps)*e_4+e_5)*n, 3*b*(s_1*i_2+s_2*i_1+1/3*s_3*i_0+1/3*i_3*s_0)
*r0+n*(mu*s_3+s_4), -i_6-r_6+24319897201382049024020685843994653677181751198159\
0990674872589144837090490247707742600479362254892641904074014846400311618363991\
7725883656498458165053093631401263731136773532723409686714686565581711726246174\
8263231342644059449976325834464411314749894423803089024095402207493169289618456\
031440102/546526660785887329309115293582874947491343404490050807876327076122001\
6686517623148758876225, -e_6*eps+(g+mu)*i_6+i_7, -g*i_6+mu*r_6+r_7, (-i_0*s_5-5
*i_1*s_4-10*i_2*s_3-10*i_3*s_2-5*i_4*s_1-i_5*s_0)*b+((mu+eps)*e_5+e_6)*n, b*(
i_0*s_4+4*i_1*s_3+6*i_2*s_2+4*i_3*s_1+i_4*s_0)*r0+n*(mu*s_4+s_5), -i_7-r_7-1451\
4802454930002423194387334596799683845815228163192715157826056106585267211050062\
4688305031727629496884712863880807465557060725344522279137063769386729218377592\
2859018131375899267702392829704572661728075887690675511149090224875389212857065\
4006178700690516709391398560429977323264387239736067482756197206476015885061485\
28802935483559696134723318075102/2016116508627313950524116306559925938541983947\
4839398731434413896174670608538398413501031296881734060806030125, -e_7*eps+(g+
mu)*i_7+i_8, -g*i_7+mu*r_7+r_8, (-i_0*s_6-6*i_1*s_5-15*i_2*s_4-20*i_3*s_3-15*
i_4*s_2-6*i_5*s_1-i_6*s_0)*b+((mu+eps)*e_6+e_7)*n, b*(i_0*s_5+5*i_1*s_4+10*i_2*
s_3+10*i_3*s_2+5*i_4*s_1+i_5*s_0)*r0+n*(mu*s_5+s_6), -i_8-r_8+69302756853320761\
2462026851396135627527642930464695893468971334526339295447696584466833258137536\
7274141972910314245399770858884823466075924198604579136341316918484641000677036\
1346802381328232716143644502891613987935954737003635418973469163770021378970823\
9829662767100409449957494120207804526194465598848801022857945259150331895025149\
664278467072566232142520255553051555193970042170118611831850872262583054/594990\
3004570204658937306202048264674625656760133097969205686252272873537526628341069\
76701245815826494818772130529129387346845, -e_8*eps+(g+mu)*i_8+i_9, -g*i_8+mu*
r_8+r_9, (-i_0*s_7-7*i_1*s_6-21*i_2*s_5-35*i_3*s_4-35*i_4*s_3-21*i_5*s_2-7*i_6*
s_1-i_7*s_0)*b+((mu+eps)*e_7+e_8)*n, 6*b*(i_5*s_1+1/6*i_6*s_0+5/2*s_2*i_4+10/3*
s_3*i_3+5/2*s_4*i_2+s_5*i_1+1/6*s_6*i_0)*r0+n*(mu*s_6+s_7), -i_9-r_9-1034046132\
0400165348691112866794327626363910433662356411817292452556505202810809824699878\
4992142265939172604319167237284475219823656265443331180817722898397979482724023\
2880992783167521664225825479150546757314498354480280967227460160802466519125320\
2408993898724971706921568905661524602374988342089865896319851363818641241713491\
6457380868198204725751500870177565544321654844216832178667123478998090878493977\
2814689457601140713770892750064245938323930334165196911798/54872426786077683021\
9317969327089138993800763777683650268930927204195104757644581825802411719859518\
51500456901294109322909616957211324653488200625, n*z_aux-1]

SubsByDepth Usage (real, cpu, memory):	1.866 	1.955 	268937808

memory used=1222.3MB, alloc=112.3MB, time=11.70
