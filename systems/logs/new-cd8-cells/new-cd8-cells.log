    |\^/|     Maple 2021 (X86 64 LINUX)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2021
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
> kernelopts(printbytes=false, assertlevel=1):
> interface(echo=0, prettyprint=0):
Warning, (in GetPolySystem) `denom_` is implicitly declared local
|imports/generate_poly_system.mpl:326|
Warning, (in GetPolySystem) `denom_` is implicitly declared local
|imports/generate_poly_system.mpl:326|
Warning, (in GetPolySystem) `denom_` is implicitly declared local
|imports/generate_poly_system.mpl:326|
Warning, (in GetPolySystem) `denom_` is implicitly declared local
|imports/generate_poly_system.mpl:326|
sigma := [diff(N(t),t) = -delta_NE*N(t)*P(t)-mu_N*N(t), diff(S(t),t) = -mu_LE*S
(t)*E(t)+delta_EL*S(t)-S(t)^2*mu_LL-S(t)*delta_LM, diff(M(t),t) = S(t)*delta_LM
-M(t)*mu_M, diff(P(t),t) = rho_P*P(t)^2-S(t)*P(t)*mu_PL-E(t)*mu_PE*P(t)-P(t)*
mu_P, diff(E(t),t) = -mu_EE*E(t)^2+delta_NE*N(t)*P(t)-delta_EL*E(t)+E(t)*P(t)*
rho_E, y1(t) = N(t), y3(t) = M(t), y2(t) = S(t)+E(t)]

=======================================================
0. Extracting states, inputs, outputs, and parameters from the system
=======================================================

=== Input info ===
State variables:          [N(t), S(t), M(t), P(t), E(t)]
Output variables:         [y1(t), y3(t), y2(t)]
Input variables:          []
Parameters in equations:  [mu_EE, mu_LE, mu_LL, mu_M, mu_N, mu_P, mu_PE, mu_PL, rho_E, rho_P, delta_EL, delta_LM, delta_NE]
===================


=======================================================
1. Constructing the maximal polynomial system
=======================================================

=======================================================
2. Truncating the polynomial system based on the Jacobian condition
=======================================================

=======================================================
3. Assessing local identifiability
=======================================================

=======================================================
Creating Truncated system (old)
=======================================================
Locally identifiable paramters:  [mu_EE, mu_LE, mu_LL, mu_M, mu_N, mu_P, mu_PE, mu_PL, delta_EL, delta_LM, N(0), S(0), M(0), E(0)]
Nonidentifiable parameter:  [P(0), rho_E, rho_P, delta_NE]

=======================================================
Substituting transcendence basis.
=======================================================
Algebraically independent parameters {P(0)}
Number of possible combinations 9
Picked the best choice [delta_NE] based on heuristic:
Algebraically independent parameters among nonidentifiable: {delta_NE}
Algebraically independent parameters among derivatives: {}

=== Input info ===
State variables:          [delta_NE(t), N(t), S(t), M(t), P(t), E(t)]
Output variables:         [y1(t), y3(t), y2(t), y_faux1(t)]
Input variables:          []
Parameters in equations:  [mu_EE, mu_LE, mu_LL, mu_M, mu_N, mu_P, mu_PE, mu_PL, rho_E, rho_P, delta_EL, delta_LM]
===================

Transcendence basis substitution turned off.

=======================================================
4. Randomizing the truncated system
=======================================================
States for substitution:	[rho_P = 2, mu_M = 1, rho_E = 1, delta_EL = 1, delta_NE_ = 0, S_ = 0, mu_LL = 1, N_ = 0, mu_P = 2, M_ = 0, E_ = 0, mu_LE = 1, mu_EE = 1, P_ = 1, delta_LM = 1, mu_PL = 2, mu_N = 1, mu_PE = 2]
NonID parameters:	[P_0, rho_E, rho_P, delta_NE]
Substitutions:	[z_aux = 2, delta_NE_ = 1, S_ = 1, N_ = 1, mu_P = 3, M_ = 1, E_ = 1, P_ = 2, mu_PL = 3, mu_PE = 3]

=======================================================
0. Extracting states, inputs, outputs, and parameters from the system
=======================================================

=== Input info ===
State variables:          [N(t), S(t), M(t), P(t), E(t)]
Output variables:         [y1(t), y3(t), y2(t)]
Input variables:          []
Parameters in equations:  [mu_EE, mu_LE, mu_LL, mu_M, mu_N, mu_P, mu_PE, mu_PL, rho_E, rho_P, delta_EL, delta_LM, delta_NE]
===================


=======================================================
1. Constructing the maximal polynomial system
=======================================================

=======================================================
2. Truncating the polynomial system based on the Jacobian condition
=======================================================

=======================================================
3. Assessing local identifiability
=======================================================

=======================================================
Creating Truncated system (old)
=======================================================
Locally identifiable paramters:  [mu_EE, mu_LE, mu_LL, mu_M, mu_N, mu_P, mu_PE, mu_PL, delta_EL, delta_LM, N(0), S(0), M(0), E(0)]
Nonidentifiable parameter:  [P(0), rho_E, rho_P, delta_NE]

=======================================================
4. Randomizing the truncated system
=======================================================
States for substitution:	[rho_P = 2, delta_NE = 1, mu_M = 1, rho_E = 1, delta_EL = 1, S_ = 0, mu_LL = 1, N_ = 0, mu_P = 2, M_ = 0, E_ = 0, mu_LE = 1, mu_EE = 1, P_ = 1, delta_LM = 1, mu_PL = 2, mu_N = 1, mu_PE = 2]
NonID parameters:	[P_0, rho_E, rho_P, delta_NE]
Substitutions:	[z_aux = 2, S_ = 1, N_ = 1, mu_P = 3, M_ = 1, E_ = 1, P_ = 2, mu_PL = 3, mu_PE = 3]
memory used=1135.3MB, alloc=169.9MB, time=11.92
