    |\^/|     Maple 2021 (X86 64 LINUX)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2021
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
> kernelopts(printbytes=false, assertlevel=1):
> interface(echo=0, prettyprint=0):
Warning, (in GetPolySystem) `prep_cpu_start` is implicitly declared local
|imports/generate_poly_system.mpl:22|
Warning, (in GetPolySystem) `prep_real_start` is implicitly declared local
|imports/generate_poly_system.mpl:23|
Warning, (in GetPolySystem) `denom_` is implicitly declared local
|imports/generate_poly_system.mpl:326|
Warning, (in GetPolySystem) `roll` is implicitly declared local
|imports/generate_poly_system.mpl:419|
Warning, (in GetPolySystem) `alg_indep_hat` is implicitly declared local
|imports/generate_poly_system.mpl:420|
Warning, (in GetPolySystem) `prep_cpu_finish` is implicitly declared local
|imports/generate_poly_system.mpl:447|
Warning, (in GetPolySystem) `prep_real_finish` is implicitly declared local
|imports/generate_poly_system.mpl:448|
Warning, (in generate_graph_from_eqs) `new_verts` is implicitly declared local
|imports/generate_poly_system.mpl:519|
Warning, (in GetPolySystem) `prep_cpu_start` is implicitly declared local
|imports/generate_poly_system.mpl:22|
Warning, (in GetPolySystem) `prep_real_start` is implicitly declared local
|imports/generate_poly_system.mpl:23|
Warning, (in GetPolySystem) `denom_` is implicitly declared local
|imports/generate_poly_system.mpl:326|
Warning, (in GetPolySystem) `roll` is implicitly declared local
|imports/generate_poly_system.mpl:419|
Warning, (in GetPolySystem) `alg_indep_hat` is implicitly declared local
|imports/generate_poly_system.mpl:420|
Warning, (in GetPolySystem) `prep_cpu_finish` is implicitly declared local
|imports/generate_poly_system.mpl:447|
Warning, (in GetPolySystem) `prep_real_finish` is implicitly declared local
|imports/generate_poly_system.mpl:448|
Warning, (in generate_graph_from_eqs) `new_verts` is implicitly declared local
|imports/generate_poly_system.mpl:519|
Warning, (in GetPolySystem) `prep_cpu_start` is implicitly declared local
|imports/generate_poly_system.mpl:22|
Warning, (in GetPolySystem) `prep_real_start` is implicitly declared local
|imports/generate_poly_system.mpl:23|
Warning, (in GetPolySystem) `denom_` is implicitly declared local
|imports/generate_poly_system.mpl:326|
Warning, (in GetPolySystem) `roll` is implicitly declared local
|imports/generate_poly_system.mpl:419|
Warning, (in GetPolySystem) `alg_indep_hat` is implicitly declared local
|imports/generate_poly_system.mpl:420|
Warning, (in GetPolySystem) `prep_cpu_finish` is implicitly declared local
|imports/generate_poly_system.mpl:447|
Warning, (in GetPolySystem) `prep_real_finish` is implicitly declared local
|imports/generate_poly_system.mpl:448|
Warning, (in generate_graph_from_eqs) `new_verts` is implicitly declared local
|imports/generate_poly_system.mpl:519|
Warning, (in GetPolySystem) `prep_cpu_start` is implicitly declared local
|imports/generate_poly_system.mpl:22|
Warning, (in GetPolySystem) `prep_real_start` is implicitly declared local
|imports/generate_poly_system.mpl:23|
Warning, (in GetPolySystem) `denom_` is implicitly declared local
|imports/generate_poly_system.mpl:326|
Warning, (in GetPolySystem) `roll` is implicitly declared local
|imports/generate_poly_system.mpl:419|
Warning, (in GetPolySystem) `alg_indep_hat` is implicitly declared local
|imports/generate_poly_system.mpl:420|
Warning, (in GetPolySystem) `prep_cpu_finish` is implicitly declared local
|imports/generate_poly_system.mpl:447|
Warning, (in GetPolySystem) `prep_real_finish` is implicitly declared local
|imports/generate_poly_system.mpl:448|
Warning, (in generate_graph_from_eqs) `new_verts` is implicitly declared local
|imports/generate_poly_system.mpl:519|
Warning, (in SubsByDepth) `out` is implicitly declared local
|imports/create_substitutions.mpl:53|
Warning, (in SubsByDepth) `mem` is implicitly declared local
|imports/create_substitutions.mpl:53|
Warning, (in SubsByDepth) `cpu_time` is implicitly declared local
|imports/create_substitutions.mpl:53|
Warning, (in SubsByDepth) `real_time` is implicitly declared local
|imports/create_substitutions.mpl:53|
Warning, (in WriteScripts) `weights` is implicitly declared local
|imports/create_substitutions.mpl:111|
Warning, (in WriteScripts) `max_degree` is implicitly declared local
|imports/create_substitutions.mpl:112|
Warning, (in WriteScripts) `new_weights` is implicitly declared local
|imports/create_substitutions.mpl:113|
Warning, (in WriteScripts) `each` is implicitly declared local
|imports/create_substitutions.mpl:113|

=======================================================
0. Extracting states, inputs, outputs, and parameters from the system
=======================================================

=== Input info ===
State variables:          [x1(t), x2(t), x3(t), x4(t), x5(t), a(t), b(t), d(t)]
Output variables:         [y1(t), y2(t), y3(t), y4(t)]
Input variables:          []
Parameters in equations:  [k3, k4, k5, k6, k7]
===================


=======================================================
1. Constructing the maximal polynomial system
=======================================================

=======================================================
2. Truncating the polynomial system based on the Jacobian condition
=======================================================

=======================================================
3. Assessing local identifiability
=======================================================

=======================================================
Creating Truncated system (old)
=======================================================
Locally identifiable paramters:  [k3, k4, k5, k6, k7, x1(0), x2(0), x5(0), a(0), b(0), d(0)]
Nonidentifiable parameter:  [x3(0), x4(0)]

=======================================================
Substituting transcendence basis.
=======================================================
Algebraically independent parameters {x3(0)}
Number of possible combinations 14
Picked the best choice [x4_0] based on heuristic:

=======================================================
4. Randomizing the truncated system
=======================================================
Prep CPU Time (sub_transc=true):	 8.268
Prep Real Elapsed Time (sub_transc=true):	 7.694
memory used=0.70GiB, alloc change=94.89MiB, cpu time=8.30s, real time=7.72s, gc time=1.43s


GetPolySystem Usage (real, cpu, memory):	7.720 	8.295 	751313856

States for substitution:	[k3 = 2, x3_ = 3, x4_ = 3, k7 = 1, x1_ = 1, x2_ = 2, b_ = 0, d_ = 0, x5_ = 0, a_ = 0, k6 = 3, k5 = 3, k4 = 2]
NonID parameters:	[x3_0, x4_0]
Substitutions:	[x3_ = 4, x4_ = 4, x1_ = 2, x2_ = 3, b_ = 1, d_ = 1, a_ = 1, k6 = 4, k5 = 4, z_aux = 3]
memory used=0.71GiB, alloc change=94.89MiB, cpu time=8.38s, real time=7.81s, gc time=1.43s
all_subs, system_vars[1], system_vars[2], alg_indep, original_et_hat := {a_0 =
a_0, a_1 = a_1, a_2 = a_2, a_3 = a_3, a_4 = a_4, a_5 = a_5, a_6 = a_6, b_0 = 
b_0, b_1 = b_1, b_2 = b_2, b_3 = b_3, b_4 = b_4, b_5 = b_5, b_6 = b_6, d_0 = 
d_0, d_1 = d_1, d_2 = d_2, d_3 = d_3, d_4 = d_4, d_5 = d_5, d_6 = d_6, k5 = k5^
4, k6 = k6^4, x1_0 = x1_0^2, x1_1 = x1_1^2, x1_2 = x1_2^2, x1_3 = x1_3^2, x1_4
= x1_4^2, x1_5 = x1_5^2, x1_6 = x1_6^2, x1_7 = x1_7^2, x1_8 = x1_8^2, x2_0 = 
x2_0^3, x2_1 = x2_1^3, x2_2 = x2_2^3, x2_3 = x2_3^3, x2_4 = x2_4^3, x2_5 = x2_5
^3, x2_6 = x2_6^3, x2_7 = x2_7^3, x3_0 = x3_0^4, x3_1 = x3_1^4, x3_2 = x3_2^4,
x3_3 = x3_3^4, x3_4 = x3_4^4, x3_5 = x3_5^4, x3_6 = x3_6^4, x4_1 = x4_1^4, x4_2
= x4_2^4, x4_3 = x4_3^4, x4_4 = x4_4^4, x4_5 = x4_5^4, x4_6 = x4_6^4, z_aux = 
z_aux^3}, [1518158247260142802836-x5_0, -k7*x1_0^2+x5_1, 76173972990574953401-
a_0, a_1, 2145417678157104685552-b_0, b_1, 2218247910316893263876-d_0, d_1, -
x5_1+2959255620380860832267560164811188329302017, -k7*x1_1^2+x5_2, -k4*x2_0^3+
k3*x1_0^2+k7*x1_0^2+x1_1^2, -x5_2-\
7725019257439023513978612871323044711693854250468629308417279432, -k7*x1_2^2+
x5_3, (k3+k7)*x1_1^2+x1_2^2-k4*x2_1^3, -k5^4*x2_0^3*x3_0^4+b_0*d_0*k5^4*x2_0^3+
a_0*k5^4*x2_0^3-k6^4*x3_0^4-1661499694228671203181*k5^4*x2_0^3+k4*x2_0^3-\
1661499694228671203181*k6^4-k3*x1_0^2+x2_1^3, -x5_3-121027833195161549056956471\
4943098580074729889640378657161109608221982876797749714977893189344598018506882\
8545375797719762082792, -k7*x1_3^2+x5_4, (k3+k7)*x1_2^2+x1_3^2-k4*x2_2^3, ((-
x3_1^4-x4_1^4+b_0*d_1+b_1*d_0+a_1)*x2_0^3-x2_1^3*(x3_0^4-b_0*d_0-a_0+
1661499694228671203181))*k5^4-x1_1^2*k3+k4*x2_1^3-k6^4*x3_1^4-k6^4*x4_1^4+x2_2^
3, k5^4*x2_0^3*x3_0^4-a_0*k5^4*x2_0^3+k6^4*x3_0^4+x3_1^4, -b_0*d_0*k5^4*x2_0^3+
1661499694228671203181*k5^4*x2_0^3+1661499694228671203181*k6^4+x4_1^4, -x5_4+25\
5178000757135989906763942611645138702539939166164982352059193129974839257915691\
6024859338250966404608507963848052492699104996974682833117200873388599738704252\
99218300277931246260783036862064, -k7*x1_4^2+x5_5, (k3+k7)*x1_3^2+x1_4^2-k4*
x2_3^3, ((-x3_2^4-x4_2^4+b_0*d_2+2*b_1*d_1+b_2*d_0+a_2)*x2_0^3+(-2*x3_1^4-2*
x4_1^4+2*b_0*d_1+2*b_1*d_0+2*a_1)*x2_1^3+x2_2^3*(-x3_0^4+b_0*d_0+a_0-\
1661499694228671203181))*k5^4-x1_2^2*k3+k4*x2_2^3-k6^4*x3_2^4-k6^4*x4_2^4+x2_3^
3, a_2, b_2, d_2, ((x3_1^4-a_1)*x2_0^3-x2_1^3*(-x3_0^4+a_0))*k5^4+k6^4*x3_1^4+
x3_2^4, ((x4_1^4-b_0*d_1-b_1*d_0)*x2_0^3-x2_1^3*(b_0*d_0-1661499694228671203181
))*k5^4+k6^4*x4_1^4+x4_2^4, -x5_5-538023447593310262581027279990700453560689793\
8330666829866298058375626015900876304535207485389180256001049130078657396330179\
7114784816139554365319398123410987676997118309135813941893255331937363843707025\
97734776545337119349977485071095155724110358831693200, -k7*x1_5^2+x5_6, (k3+k7)
*x1_4^2+x1_5^2-k4*x2_4^3, ((-x3_3^4-x4_3^4+b_0*d_3+3*b_1*d_2+3*b_2*d_1+b_3*d_0+
a_3)*x2_0^3+(-3*x3_2^4-3*x4_2^4+3*b_0*d_2+6*b_1*d_1+3*b_2*d_0+3*a_2)*x2_1^3+(-3
*x3_1^4-3*x4_1^4+3*b_0*d_1+3*b_1*d_0+3*a_1)*x2_2^3+x2_3^3*(-x3_0^4+b_0*d_0+a_0-\
1661499694228671203181))*k5^4-x1_3^2*k3+k4*x2_3^3-k6^4*x3_3^4-k6^4*x4_3^4+x2_4^
3, a_3, b_3, d_3, ((x3_2^4-a_2)*x2_0^3+(2*x3_1^4-2*a_1)*x2_1^3-x2_2^3*(-x3_0^4+
a_0))*k5^4+k6^4*x3_2^4+x3_3^4, ((x4_2^4-b_0*d_2-2*b_1*d_1-b_2*d_0)*x2_0^3+(2*
x4_1^4-2*b_0*d_1-2*b_1*d_0)*x2_1^3+x2_2^3*(-b_0*d_0+1661499694228671203181))*k5
^4+k6^4*x4_2^4+x4_3^4, -x5_6+11343816053943143015795310264804428461974241982893\
7650571818328798379548544877668532534330420315385997375985687919660040702215451\
5505958959498068316569203468701408199222427743287924276192713270653828687684879\
5781358566070442166208930013878758786069152912952806141593629733503387775152529\
4788815722567957689903231407678128, -k7*x1_6^2+x5_7, (k3+k7)*x1_5^2+x1_6^2-k4*
x2_5^3, ((-x3_4^4-x4_4^4+b_0*d_4+4*b_1*d_3+6*b_2*d_2+4*b_3*d_1+b_4*d_0+a_4)*
x2_0^3+(-4*x3_3^4-4*x4_3^4+4*b_0*d_3+12*b_1*d_2+12*b_2*d_1+4*b_3*d_0+4*a_3)*
x2_1^3+(-6*x3_2^4-6*x4_2^4+6*b_0*d_2+12*b_1*d_1+6*b_2*d_0+6*a_2)*x2_2^3+(-4*
x3_1^4-4*x4_1^4+4*b_0*d_1+4*b_1*d_0+4*a_1)*x2_3^3+x2_4^3*(-x3_0^4+b_0*d_0+a_0-\
1661499694228671203181))*k5^4-x1_4^2*k3+k4*x2_4^3-k6^4*x3_4^4-k6^4*x4_4^4+x2_5^
3, a_4, b_4, d_4, ((x3_3^4-a_3)*x2_0^3+(3*x3_2^4-3*a_2)*x2_1^3+(3*x3_1^4-3*a_1)
*x2_2^3+x2_3^3*(x3_0^4-a_0))*k5^4+k6^4*x3_3^4+x3_4^4, ((x4_3^4-b_0*d_3-3*b_1*
d_2-3*b_2*d_1-b_3*d_0)*x2_0^3+(3*x4_2^4-3*b_0*d_2-6*b_1*d_1-3*b_2*d_0)*x2_1^3+(
-d_0*x2_3^3-3*d_1*x2_2^3)*b_0-3*x2_2^3*b_1*d_0+3*x2_2^3*x4_1^4+
1661499694228671203181*x2_3^3)*k5^4+k6^4*x4_3^4+x4_4^4, -x5_7-23917575198872838\
7817264946211898991135180975518619248587492238218161522827021307375517883874631\
7810650189952745405218440599992446273860246859369985641831741596150850452466184\
5128736948560776079760965137352822399797505710547537213669459733868333000687054\
4082870076761151518762886447187152797076422175486764058894434246436459097229935\
7563418392235186010031352729489939277282018686463184, -k7*x1_7^2+x5_8, (k3+k7)*
x1_6^2+x1_7^2-k4*x2_6^3, ((-x3_5^4-x4_5^4+b_0*d_5+5*b_1*d_4+10*b_2*d_3+10*b_3*
d_2+5*b_4*d_1+b_5*d_0+a_5)*x2_0^3+(-5*x3_4^4-5*x4_4^4+5*b_0*d_4+20*b_1*d_3+30*
b_2*d_2+20*b_3*d_1+5*b_4*d_0+5*a_4)*x2_1^3+(-10*x3_3^4-10*x4_3^4+10*b_0*d_3+30*
b_1*d_2+30*b_2*d_1+10*b_3*d_0+10*a_3)*x2_2^3+(-10*x3_2^4-10*x4_2^4+10*b_0*d_2+
20*b_1*d_1+10*b_2*d_0+10*a_2)*x2_3^3+(d_0*x2_5^3+5*d_1*x2_4^3)*b_0+5*b_1*d_0*
x2_4^3+(-5*x3_1^4-5*x4_1^4+5*a_1)*x2_4^3-x2_5^3*(x3_0^4-a_0+
1661499694228671203181))*k5^4-k3*x1_5^2+k4*x2_5^3-k6^4*x3_5^4-k6^4*x4_5^4+x2_6^
3, a_5, b_5, d_5, ((x3_4^4-a_4)*x2_0^3+(4*x3_3^4-4*a_3)*x2_1^3+(6*x3_2^4-6*a_2)
*x2_2^3+(4*x3_1^4-4*a_1)*x2_3^3+x2_4^3*(x3_0^4-a_0))*k5^4+k6^4*x3_4^4+x3_5^4, (
(x4_4^4-b_0*d_4-4*b_1*d_3-6*b_2*d_2-4*b_3*d_1-b_4*d_0)*x2_0^3+(4*x4_3^4-4*b_0*
d_3-12*b_1*d_2-12*b_2*d_1-4*b_3*d_0)*x2_1^3+(-d_0*x2_4^3-4*d_1*x2_3^3-6*d_2*
x2_2^3)*b_0+(-4*b_1*x2_3^3-6*b_2*x2_2^3)*d_0+(6*x4_2^4-12*b_1*d_1)*x2_2^3+4*
x4_1^4*x2_3^3+1661499694228671203181*x2_4^3)*k5^4+k6^4*x4_4^4+x4_5^4, -x5_8+504\
2839205726460556120756229281977393587625972418735595860790944447290390417745125\
6393991449593891150494410644496559591191172645034158063375465282085785312651332\
7910213284870783871270473646907026152393087133537419558591006841665068399116814\
6664340619324180371261105946002647515730783277831543312697312807085934399880853\
0566292272676756030052085696811335716690475370433175756488111817325862218943905\
756150683817395381087952447062780217625208251858352, -k7*x1_8^2+x5_9, (k3+k7)*
x1_7^2+x1_8^2-k4*x2_7^3, ((-x3_6^4-x4_6^4+b_0*d_6+6*b_1*d_5+15*b_2*d_4+20*b_3*
d_3+15*b_4*d_2+6*b_5*d_1+b_6*d_0+a_6)*x2_0^3+(-6*x3_5^4-6*x4_5^4+6*b_0*d_5+30*
b_1*d_4+60*b_2*d_3+60*b_3*d_2+30*b_4*d_1+6*b_5*d_0+6*a_5)*x2_1^3+(-15*x3_4^4-15
*x4_4^4+15*b_0*d_4+60*b_1*d_3+90*b_2*d_2+60*b_3*d_1+15*b_4*d_0+15*a_4)*x2_2^3+(
-20*x3_3^4-20*x4_3^4+20*b_0*d_3+60*b_1*d_2+60*b_2*d_1+20*b_3*d_0+20*a_3)*x2_3^3
+(d_0*x2_6^3+6*d_1*x2_5^3+15*d_2*x2_4^3)*b_0+(6*b_1*x2_5^3+15*b_2*x2_4^3)*d_0+(
-15*x3_2^4-15*x4_2^4+30*b_1*d_1+15*a_2)*x2_4^3+(-6*x3_1^4-6*x4_1^4+6*a_1)*x2_5^
3-x2_6^3*(x3_0^4-a_0+1661499694228671203181))*k5^4-k3*x1_6^2+k4*x2_6^3-k6^4*
x3_6^4-k6^4*x4_6^4+x2_7^3, a_6, b_6, d_6, ((x3_5^4-a_5)*x2_0^3+(5*x3_4^4-5*a_4)
*x2_1^3+(10*x3_3^4-10*a_3)*x2_2^3+(10*x3_2^4-10*a_2)*x2_3^3+(5*x3_1^4-5*a_1)*
x2_4^3+x2_5^3*(x3_0^4-a_0))*k5^4+k6^4*x3_5^4+x3_6^4, ((x4_5^4-b_0*d_5-5*b_1*d_4
-10*b_2*d_3-10*b_3*d_2-5*b_4*d_1-b_5*d_0)*x2_0^3+(5*x4_4^4-5*b_0*d_4-20*b_1*d_3
-30*b_2*d_2-20*b_3*d_1-5*b_4*d_0)*x2_1^3+(-d_0*x2_5^3-5*d_1*x2_4^3-10*d_2*x2_3^
3-10*d_3*x2_2^3)*b_0+(-5*b_1*x2_4^3-10*b_2*x2_3^3-10*b_3*x2_2^3)*d_0+(10*x4_3^4
-30*b_1*d_2-30*b_2*d_1)*x2_2^3-20*d_1*x2_3^3*b_1+10*x2_3^3*x4_2^4+5*x2_4^3*x4_1
^4+1661499694228671203181*x2_5^3)*k5^4+k6^4*x4_5^4+x4_6^4, -x5_9-10632443733681\
8020730452060867919748523016729115627656741598805265715060277334266048806291746\
8481327352935230680635084648206341352567161514998817362547571656195178181239136\
9787188781819226448572370087306729970879994914993993544098398883682302096965547\
3063741534337065188307375305304449023447814013534100198621489926995867791792530\
4681863798550578247813535716875111052088741399018006677805404468431850799146997\
7611500390961551139124081873679327086450103116133847762073194493509667211672964\
48028968751629912364755408, -a_1, -a_2, -a_3, -a_4, -a_5, -a_6, -b_1, -b_2, -
b_3, -b_4, -b_5, -b_6, -d_1, -d_2, -d_3, -d_4, -d_5, -d_6, z_aux^3-1], [x5_9, 
x5_8, x1_8, x5_7, x2_7, x1_7, x5_6, x4_6, x3_6, x2_6, x1_6, d_6, b_6, a_6, x5_5
, x4_5, x3_5, x2_5, x1_5, d_5, b_5, a_5, x5_4, x4_4, x3_4, x2_4, x1_4, d_4, b_4
, a_4, x5_3, x4_3, x3_3, x2_3, x1_3, d_3, b_3, a_3, x5_2, x4_2, x3_2, x2_2, 
x1_2, d_2, b_2, a_2, x5_1, x4_1, x3_1, x2_1, x1_1, d_1, b_1, a_1, x5_0, x3_0, 
x2_0, x1_0, d_0, b_0, a_0, z_aux, w_aux, k3, k4, k5, k6, k7], [x4_0], [
1518158247260142802836-x5_0, -k7*x1_0+x5_1, 76173972990574953401-a_0, a_1, 
2145417678157104685552-b_0, b_1, 2218247910316893263876-d_0, d_1, -x5_1+
2959255620380860832267560164811188329302017, -k7*x1_1+x5_2, k3*x1_0-k4*x2_0+k7*
x1_0+x1_1, -x5_2-\
7725019257439023513978612871323044711693854250468629308417279432, -k7*x1_2+x5_3
, (k3+k7)*x1_1+x1_2-k4*x2_1, b_0*d_0*k5*x2_0+a_0*k5*x2_0-k5*x2_0*x3_0-k3*x1_0+
k4*x2_0-1661499694228671203181*k5*x2_0-k6*x3_0-1661499694228671203181*k6+x2_1,
-x5_3-1210278331951615490569564714943098580074729889640378657161109608221982876\
7977497149778931893445980185068828545375797719762082792, -k7*x1_3+x5_4, (k3+k7)
*x1_2+x1_3-k4*x2_2, ((b_0*d_1+b_1*d_0+a_1-x3_1-x4_1)*x2_0-x2_1*(-b_0*d_0-a_0+
x3_0+1661499694228671203181))*k5-x1_1*k3+k4*x2_1-k6*x3_1-k6*x4_1+x2_2, -a_0*k5*
x2_0+k5*x2_0*x3_0+k6*x3_0+x3_1, -b_0*d_0*k5*x2_0+1661499694228671203181*k5*x2_0
+1661499694228671203181*k6+x4_1, -x5_4+2551780007571359899067639426116451387025\
3993916616498235205919312997483925791569160248593382509664046085079638480524926\
9910499697468283311720087338859973870425299218300277931246260783036862064, -k7*
x1_4+x5_5, (k3+k7)*x1_3+x1_4-k4*x2_3, ((b_0*d_2+2*b_1*d_1+b_2*d_0+a_2-x3_2-x4_2
)*x2_0+(2*b_0*d_1+2*b_1*d_0+2*a_1-2*x3_1-2*x4_1)*x2_1+x2_2*(b_0*d_0+a_0-x3_0-\
1661499694228671203181))*k5-x1_2*k3+k4*x2_2-k6*x3_2-k6*x4_2+x2_3, a_2, b_2, d_2
, ((-a_1+x3_1)*x2_0-x2_1*(a_0-x3_0))*k5+k6*x3_1+x3_2, ((-b_0*d_1-b_1*d_0+x4_1)*
x2_0-x2_1*(b_0*d_0-1661499694228671203181))*k5+k6*x4_1+x4_2, -x5_5-538023447593\
3102625810272799907004535606897938330666829866298058375626015900876304535207485\
3891802560010491300786573963301797114784816139554365319398123410987676997118309\
1358139418932553319373638437070259773477654533711934997748507109515572411035883\
1693200, -k7*x1_5+x5_6, (k3+k7)*x1_4+x1_5-k4*x2_4, ((b_0*d_3+3*b_1*d_2+3*b_2*
d_1+b_3*d_0+a_3-x3_3-x4_3)*x2_0+(3*b_0*d_2+6*b_1*d_1+3*b_2*d_0+3*a_2-3*x3_2-3*
x4_2)*x2_1+(3*b_0*d_1+3*b_1*d_0+3*a_1-3*x3_1-3*x4_1)*x2_2+x2_3*(b_0*d_0+a_0-
x3_0-1661499694228671203181))*k5-x1_3*k3+k4*x2_3-k6*x3_3-k6*x4_3+x2_4, a_3, b_3
, d_3, ((x3_2-a_2)*x2_0+(2*x3_1-2*a_1)*x2_1-x2_2*(a_0-x3_0))*k5+k6*x3_2+x3_3, (
(-b_0*d_2-2*b_1*d_1-b_2*d_0+x4_2)*x2_0+(-2*b_0*d_1-2*b_1*d_0+2*x4_1)*x2_1+x2_2*
(-b_0*d_0+1661499694228671203181))*k5+k6*x4_2+x4_3, -x5_6+113438160539431430157\
9531026480442846197424198289376505718183287983795485448776685325343304203153859\
9737598568791966004070221545155059589594980683165692034687014081992224277432879\
2427619271327065382868768487957813585660704421662089300138787587860691529129528\
061415936297335033877751525294788815722567957689903231407678128, -k7*x1_6+x5_7,
(k3+k7)*x1_5+x1_6-k4*x2_5, ((b_0*d_4+4*b_1*d_3+6*b_2*d_2+4*b_3*d_1+b_4*d_0+a_4-
x3_4-x4_4)*x2_0+(4*b_0*d_3+12*b_1*d_2+12*b_2*d_1+4*b_3*d_0+4*a_3-4*x3_3-4*x4_3)
*x2_1+(6*b_0*d_2+12*b_1*d_1+6*b_2*d_0+6*a_2-6*x3_2-6*x4_2)*x2_2+(4*b_0*d_1+4*
b_1*d_0+4*a_1-4*x3_1-4*x4_1)*x2_3+x2_4*(b_0*d_0+a_0-x3_0-1661499694228671203181
))*k5-x1_4*k3+k4*x2_4-k6*x3_4-k6*x4_4+x2_5, a_4, b_4, d_4, ((x3_3-a_3)*x2_0+(3*
x3_2-3*a_2)*x2_1+(3*x3_1-3*a_1)*x2_2+x2_3*(-a_0+x3_0))*k5+k6*x3_3+x3_4, ((-b_0*
d_3-3*b_1*d_2-3*b_2*d_1-b_3*d_0+x4_3)*x2_0+(-3*b_0*d_2-6*b_1*d_1-3*b_2*d_0+3*
x4_2)*x2_1+(-d_0*x2_3-3*d_1*x2_2)*b_0-3*x2_2*b_1*d_0+3*x2_2*x4_1+
1661499694228671203181*x2_3)*k5+k6*x4_3+x4_4, -x5_7-239175751988728387817264946\
2118989911351809755186192485874922382181615228270213073755178838746317810650189\
9527454052184405999924462738602468593699856418317415961508504524661845128736948\
5607760797609651373528223997975057105475372136694597338683330006870544082870076\
7611515187628864471871527970764221754867640588944342464364590972299357563418392\
235186010031352729489939277282018686463184, -k7*x1_7+x5_8, (k3+k7)*x1_6+x1_7-k4
*x2_6, ((b_0*d_5+5*b_1*d_4+10*b_2*d_3+10*b_3*d_2+5*b_4*d_1+b_5*d_0+a_5-x3_5-
x4_5)*x2_0+(5*b_0*d_4+20*b_1*d_3+30*b_2*d_2+20*b_3*d_1+5*b_4*d_0+5*a_4-5*x3_4-5
*x4_4)*x2_1+(10*b_0*d_3+30*b_1*d_2+30*b_2*d_1+10*b_3*d_0+10*a_3-10*x3_3-10*x4_3
)*x2_2+(10*b_0*d_2+20*b_1*d_1+10*b_2*d_0+10*a_2-10*x3_2-10*x4_2)*x2_3+(d_0*x2_5
+5*d_1*x2_4)*b_0+5*b_1*d_0*x2_4+(-5*x3_1-5*x4_1+5*a_1)*x2_4-x2_5*(x3_0+
1661499694228671203181-a_0))*k5-k3*x1_5+k4*x2_5-k6*x3_5-k6*x4_5+x2_6, a_5, b_5,
d_5, ((x3_4-a_4)*x2_0+(4*x3_3-4*a_3)*x2_1+(6*x3_2-6*a_2)*x2_2+(4*x3_1-4*a_1)*
x2_3+x2_4*(-a_0+x3_0))*k5+k6*x3_4+x3_5, ((-b_0*d_4-4*b_1*d_3-6*b_2*d_2-4*b_3*
d_1-b_4*d_0+x4_4)*x2_0+(-4*b_0*d_3-12*b_1*d_2-12*b_2*d_1-4*b_3*d_0+4*x4_3)*x2_1
+(-d_0*x2_4-4*d_1*x2_3-6*d_2*x2_2)*b_0+(-4*b_1*x2_3-6*b_2*x2_2)*d_0+(-12*b_1*
d_1+6*x4_2)*x2_2+4*x4_1*x2_3+1661499694228671203181*x2_4)*k5+k6*x4_4+x4_5, -
x5_8+50428392057264605561207562292819773935876259724187355958607909444472903904\
1774512563939914495938911504944106444965595911911726450341580633754652820857853\
1265133279102132848707838712704736469070261523930871335374195585910068416650683\
9911681466643406193241803712611059460026475157307832778315433126973128070859343\
9988085305662922726767560300520856968113357166904753704331757564881118173258622\
18943905756150683817395381087952447062780217625208251858352, -k7*x1_8+x5_9, (k3
+k7)*x1_7+x1_8-k4*x2_7, ((b_0*d_6+6*b_1*d_5+15*b_2*d_4+20*b_3*d_3+15*b_4*d_2+6*
b_5*d_1+b_6*d_0+a_6-x3_6-x4_6)*x2_0+(6*b_0*d_5+30*b_1*d_4+60*b_2*d_3+60*b_3*d_2
+30*b_4*d_1+6*b_5*d_0+6*a_5-6*x3_5-6*x4_5)*x2_1+(15*b_0*d_4+60*b_1*d_3+90*b_2*
d_2+60*b_3*d_1+15*b_4*d_0+15*a_4-15*x3_4-15*x4_4)*x2_2+(20*b_0*d_3+60*b_1*d_2+
60*b_2*d_1+20*b_3*d_0+20*a_3-20*x3_3-20*x4_3)*x2_3+(d_0*x2_6+6*d_1*x2_5+15*d_2*
x2_4)*b_0+(6*b_1*x2_5+15*b_2*x2_4)*d_0+(30*b_1*d_1+15*a_2-15*x3_2-15*x4_2)*x2_4
+(-6*x3_1-6*x4_1+6*a_1)*x2_5-x2_6*(x3_0+1661499694228671203181-a_0))*k5-k3*x1_6
+k4*x2_6-k6*x3_6-k6*x4_6+x2_7, a_6, b_6, d_6, ((x3_5-a_5)*x2_0+(5*x3_4-5*a_4)*
x2_1+(10*x3_3-10*a_3)*x2_2+(10*x3_2-10*a_2)*x2_3+(5*x3_1-5*a_1)*x2_4+x2_5*(-a_0
+x3_0))*k5+k6*x3_5+x3_6, ((-b_0*d_5-5*b_1*d_4-10*b_2*d_3-10*b_3*d_2-5*b_4*d_1-
b_5*d_0+x4_5)*x2_0+(-5*b_0*d_4-20*b_1*d_3-30*b_2*d_2-20*b_3*d_1-5*b_4*d_0+5*
x4_4)*x2_1+(-d_0*x2_5-5*d_1*x2_4-10*d_2*x2_3-10*d_3*x2_2)*b_0+(-5*b_1*x2_4-10*
b_2*x2_3-10*b_3*x2_2)*d_0+(-30*b_1*d_2-30*b_2*d_1+10*x4_3)*x2_2-20*d_1*x2_3*b_1
+10*x2_3*x4_2+5*x2_4*x4_1+1661499694228671203181*x2_5)*k5+k6*x4_5+x4_6, -x5_9-\
1063244373368180207304520608679197485230167291156276567415988052657150602773342\
6604880629174684813273529352306806350846482063413525671615149988173625475716561\
9517818123913697871887818192264485723700873067299708799949149939935440983988836\
8230209696554730637415343370651883073753053044490234478140135341001986214899269\
9586779179253046818637985505782478135357168751110520887413990180066778054044684\
3185079914699776115003909615511391240818736793270864501031161338477620731944935\
0966721167296448028968751629912364755408, -a_1, -a_2, -a_3, -a_4, -a_5, -a_6, -
b_1, -b_2, -b_3, -b_4, -b_5, -b_6, -d_1, -d_2, -d_3, -d_4, -d_5, -d_6, z_aux-1]

SubsByDepth Usage (real, cpu, memory):	7.806 	8.381 	757056104


=======================================================
0. Extracting states, inputs, outputs, and parameters from the system
=======================================================

=== Input info ===
State variables:          [x1(t), x2(t), x3(t), x4(t), x5(t), a(t), b(t), d(t)]
Output variables:         [y1(t), y2(t), y3(t), y4(t)]
Input variables:          []
Parameters in equations:  [k3, k4, k5, k6, k7]
===================


=======================================================
1. Constructing the maximal polynomial system
=======================================================

=======================================================
2. Truncating the polynomial system based on the Jacobian condition
=======================================================

=======================================================
3. Assessing local identifiability
=======================================================

=======================================================
Creating Truncated system (old)
=======================================================
Locally identifiable paramters:  [k3, k4, k5, k6, k7, x1(0), x2(0), x5(0), a(0), b(0), d(0)]
Nonidentifiable parameter:  [x3(0), x4(0)]

=======================================================
4. Randomizing the truncated system
=======================================================
Prep CPU Time (sub_transc=false):	 3.548
Prep Real Elapsed Time (sub_transc=false):	 3.167
memory used=345.13MiB, alloc change=0.59MiB, cpu time=3.55s, real time=3.17s, gc time=836.72ms


GetPolySystem Usage (real, cpu, memory):	3.170 	3.551 	361892808

States for substitution:	[k3 = 2, x3_ = 3, x4_ = 3, k7 = 1, x1_ = 1, x2_ = 2, b_ = 0, d_ = 0, x5_ = 0, a_ = 0, k6 = 3, k5 = 3, k4 = 2]
NonID parameters:	[x3_0, x4_0]
Substitutions:	[x3_ = 4, x4_ = 4, x1_ = 2, x2_ = 3, b_ = 1, d_ = 1, a_ = 1, k6 = 4, k5 = 4, z_aux = 3]
memory used=350.21MiB, alloc change=0.59MiB, cpu time=3.60s, real time=3.22s, gc time=836.72ms
all_subs, system_vars[1], system_vars[2], alg_indep, original_et_hat := {a_0 =
a_0, a_1 = a_1, a_2 = a_2, a_3 = a_3, a_4 = a_4, a_5 = a_5, a_6 = a_6, b_0 = 
b_0, b_1 = b_1, b_2 = b_2, b_3 = b_3, b_4 = b_4, b_5 = b_5, b_6 = b_6, d_0 = 
d_0, d_1 = d_1, d_2 = d_2, d_3 = d_3, d_4 = d_4, d_5 = d_5, d_6 = d_6, k5 = k5^
4, k6 = k6^4, x1_0 = x1_0^2, x1_1 = x1_1^2, x1_2 = x1_2^2, x1_3 = x1_3^2, x1_4
= x1_4^2, x1_5 = x1_5^2, x1_6 = x1_6^2, x1_7 = x1_7^2, x1_8 = x1_8^2, x2_0 = 
x2_0^3, x2_1 = x2_1^3, x2_2 = x2_2^3, x2_3 = x2_3^3, x2_4 = x2_4^3, x2_5 = x2_5
^3, x2_6 = x2_6^3, x2_7 = x2_7^3, x3_0 = x3_0^4, x3_1 = x3_1^4, x3_2 = x3_2^4,
x3_3 = x3_3^4, x3_4 = x3_4^4, x3_5 = x3_5^4, x3_6 = x3_6^4, x4_0 = x4_0^4, x4_1
= x4_1^4, x4_2 = x4_2^4, x4_3 = x4_3^4, x4_4 = x4_4^4, x4_5 = x4_5^4, x4_6 = 
x4_6^4, z_aux = z_aux^3}, [2100350059573498705555-x5_0, -k7*x1_0^2+x5_1, 
1712950256275109199273-a_0, a_1, 358514408893152687490-b_0, b_1, 
3330771270539489755241-d_0, d_1, -x5_1+
2367240827870923862454051838384724336952416, -k7*x1_1^2+x5_2, -k4*x2_0^3+k3*
x1_0^2+k7*x1_0^2+x1_1^2, -x5_2-\
8944271529708242688792456490783945458323571409279759075043507848, -k7*x1_2^2+
x5_3, (k3+k7)*x1_1^2+x1_2^2-k4*x2_1^3, -k5^4*x2_0^3*x3_0^4-k5^4*x2_0^3*x4_0^4+
b_0*d_0*k5^4*x2_0^3+a_0*k5^4*x2_0^3-k6^4*x3_0^4-k6^4*x4_0^4+k4*x2_0^3-k3*x1_0^2
+x2_1^3, -x5_3-1005328568176382717633038700599755433196544347097615226359749039\
9113633678569910277442095630876991612001795621382409688484373980, -k7*x1_3^2+
x5_4, (k3+k7)*x1_2^2+x1_3^2-k4*x2_2^3, ((-x3_1^4-x4_1^4+b_0*d_1+b_1*d_0+a_1)*
x2_0^3-x2_1^3*(x3_0^4+x4_0^4-b_0*d_0-a_0))*k5^4-x1_1^2*k3+k4*x2_1^3-k6^4*x3_1^4
-k6^4*x4_1^4+x2_2^3, k5^4*x2_0^3*x3_0^4-a_0*k5^4*x2_0^3+k6^4*x3_0^4+x3_1^4, k5^
4*x2_0^3*x4_0^4-b_0*d_0*k5^4*x2_0^3+k6^4*x4_0^4+x4_1^4, -x5_4+24787516530318004\
2870487687267733645073615139846472140757327733116961848269481561493210496415472\
5127978667316015049746338211726535362352454474801442770948626469822266980246275\
0766740917890776, -k7*x1_4^2+x5_5, (k3+k7)*x1_3^2+x1_4^2-k4*x2_3^3, ((-x3_2^4-
x4_2^4+b_0*d_2+2*b_1*d_1+b_2*d_0+a_2)*x2_0^3+(-2*x3_1^4-2*x4_1^4+2*b_0*d_1+2*
b_1*d_0+2*a_1)*x2_1^3+x2_2^3*(-x3_0^4-x4_0^4+b_0*d_0+a_0))*k5^4-x1_2^2*k3+k4*
x2_2^3-k6^4*x3_2^4-k6^4*x4_2^4+x2_3^3, a_2, b_2, d_2, ((x3_1^4-a_1)*x2_0^3-x2_1
^3*(-x3_0^4+a_0))*k5^4+k6^4*x3_1^4+x3_2^4, ((x4_1^4-b_0*d_1-b_1*d_0)*x2_0^3-
x2_1^3*(-x4_0^4+b_0*d_0))*k5^4+k6^4*x4_1^4+x4_2^4, -x5_5-6111643448622157187889\
2109712526810857261879001674364065725780588674282079877082815097554951935565053\
2433792911133104834229204173376289024635229489400837148811146349049248045831761\
72149795410061372880950999199957450179136250220583823962853997049079637164, -k7
*x1_5^2+x5_6, (k3+k7)*x1_4^2+x1_5^2-k4*x2_4^3, ((-x3_3^4-x4_3^4+b_0*d_3+3*b_1*
d_2+3*b_2*d_1+b_3*d_0+a_3)*x2_0^3+(-3*x3_2^4-3*x4_2^4+3*b_0*d_2+6*b_1*d_1+3*b_2
*d_0+3*a_2)*x2_1^3+(-3*x3_1^4-3*x4_1^4+3*b_0*d_1+3*b_1*d_0+3*a_1)*x2_2^3+x2_3^3
*(-x3_0^4-x4_0^4+b_0*d_0+a_0))*k5^4-x1_3^2*k3+k4*x2_3^3-k6^4*x3_3^4-k6^4*x4_3^4
+x2_4^3, a_3, b_3, d_3, ((x3_2^4-a_2)*x2_0^3+(2*x3_1^4-2*a_1)*x2_1^3-x2_2^3*(-
x3_0^4+a_0))*k5^4+k6^4*x3_2^4+x3_3^4, ((x4_2^4-b_0*d_2-2*b_1*d_1-b_2*d_0)*x2_0^
3+(2*x4_1^4-2*b_0*d_1-2*b_1*d_0)*x2_1^3+x2_2^3*(x4_0^4-b_0*d_0))*k5^4+k6^4*x4_2
^4+x4_3^4, -x5_6+15068950371611486092063623063985808480023042209831615876166390\
7389825229831444752650028623571790889191543421702017611624693604123310892798516\
0885220018539174195601213873471492631447043723729042099692949716248772055729453\
4113326539421110707071164395614262727550194656184344985448029303367054291462310\
6697299606826798852, -k7*x1_6^2+x5_7, (k3+k7)*x1_5^2+x1_6^2-k4*x2_5^3, ((-x3_4^
4-x4_4^4+b_0*d_4+4*b_1*d_3+6*b_2*d_2+4*b_3*d_1+b_4*d_0+a_4)*x2_0^3+(-4*x3_3^4-4
*x4_3^4+4*b_0*d_3+12*b_1*d_2+12*b_2*d_1+4*b_3*d_0+4*a_3)*x2_1^3+(-6*x3_2^4-6*
x4_2^4+6*b_0*d_2+12*b_1*d_1+6*b_2*d_0+6*a_2)*x2_2^3+(-4*x3_1^4-4*x4_1^4+4*b_0*
d_1+4*b_1*d_0+4*a_1)*x2_3^3+x2_4^3*(-x3_0^4-x4_0^4+b_0*d_0+a_0))*k5^4-x1_4^2*k3
+k4*x2_4^3-k6^4*x3_4^4-k6^4*x4_4^4+x2_5^3, a_4, b_4, d_4, ((x3_3^4-a_3)*x2_0^3+
(3*x3_2^4-3*a_2)*x2_1^3+(3*x3_1^4-3*a_1)*x2_2^3+x2_3^3*(x3_0^4-a_0))*k5^4+k6^4*
x3_3^4+x3_4^4, ((x4_3^4-b_0*d_3-3*b_1*d_2-3*b_2*d_1-b_3*d_0)*x2_0^3+(3*x4_2^4-3
*b_0*d_2-6*b_1*d_1-3*b_2*d_0)*x2_1^3+(-d_0*x2_3^3-3*d_1*x2_2^3)*b_0-3*x2_2^3*
b_1*d_0+3*x2_2^3*x4_1^4+x2_3^3*x4_0^4)*k5^4+k6^4*x4_3^4+x4_4^4, -x5_7-371542069\
1848157498983374272282498045253535750395147273631050647737598764948875598626548\
4065161443635025294142614736591510025439192914732835798059520760960880979852881\
7096478208902907582216356760228297191346525029380059495048595075044562033412711\
2283757091719929299287428601710886231084416173630453590348700007238117659724268\
40844911746001693474616088408367015567405257068642082692, -k7*x1_7^2+x5_8, (k3+
k7)*x1_6^2+x1_7^2-k4*x2_6^3, ((-x3_5^4-x4_5^4+b_0*d_5+5*b_1*d_4+10*b_2*d_3+10*
b_3*d_2+5*b_4*d_1+b_5*d_0+a_5)*x2_0^3+(-5*x3_4^4-5*x4_4^4+5*b_0*d_4+20*b_1*d_3+
30*b_2*d_2+20*b_3*d_1+5*b_4*d_0+5*a_4)*x2_1^3+(-10*x3_3^4-10*x4_3^4+10*b_0*d_3+
30*b_1*d_2+30*b_2*d_1+10*b_3*d_0+10*a_3)*x2_2^3+(-10*x3_2^4-10*x4_2^4+10*b_0*
d_2+20*b_1*d_1+10*b_2*d_0+10*a_2)*x2_3^3+(d_0*x2_5^3+5*d_1*x2_4^3)*b_0+5*b_1*
d_0*x2_4^3+(-5*x3_1^4-5*x4_1^4+5*a_1)*x2_4^3-x2_5^3*(x3_0^4+x4_0^4-a_0))*k5^4-
k3*x1_5^2+k4*x2_5^3-k6^4*x3_5^4-k6^4*x4_5^4+x2_6^3, a_5, b_5, d_5, ((x3_4^4-a_4
)*x2_0^3+(4*x3_3^4-4*a_3)*x2_1^3+(6*x3_2^4-6*a_2)*x2_2^3+(4*x3_1^4-4*a_1)*x2_3^
3+x2_4^3*(x3_0^4-a_0))*k5^4+k6^4*x3_4^4+x3_5^4, ((x4_4^4-b_0*d_4-4*b_1*d_3-6*
b_2*d_2-4*b_3*d_1-b_4*d_0)*x2_0^3+(4*x4_3^4-4*b_0*d_3-12*b_1*d_2-12*b_2*d_1-4*
b_3*d_0)*x2_1^3+(-d_0*x2_4^3-4*d_1*x2_3^3-6*d_2*x2_2^3)*b_0+(-4*b_1*x2_3^3-6*
b_2*x2_2^3)*d_0+(6*x4_2^4-12*b_1*d_1)*x2_2^3+4*x4_1^4*x2_3^3+x4_0^4*x2_4^3)*k5^
4+k6^4*x4_4^4+x4_5^4, -x5_8+916079128073815041014470603616840122504684423819029\
3903695350277529946147228071420009621101080347554848436484855193512025514846941\
4412689781038851466897308593356274563389491030195730734021912574726567744143013\
0062440265838108399835752661524080522448201878506617786576413664926348312693009\
1016797115562817875835762526051556186906566063110598430696372424996525268732089\
81890799222466392116817334429099803783369934628389752470470141558842451802904,
-k7*x1_8^2+x5_9, (k3+k7)*x1_7^2+x1_8^2-k4*x2_7^3, ((-x3_6^4-x4_6^4+b_0*d_6+6*
b_1*d_5+15*b_2*d_4+20*b_3*d_3+15*b_4*d_2+6*b_5*d_1+b_6*d_0+a_6)*x2_0^3+(-6*x3_5
^4-6*x4_5^4+6*b_0*d_5+30*b_1*d_4+60*b_2*d_3+60*b_3*d_2+30*b_4*d_1+6*b_5*d_0+6*
a_5)*x2_1^3+(-15*x3_4^4-15*x4_4^4+15*b_0*d_4+60*b_1*d_3+90*b_2*d_2+60*b_3*d_1+
15*b_4*d_0+15*a_4)*x2_2^3+(-20*x3_3^4-20*x4_3^4+20*b_0*d_3+60*b_1*d_2+60*b_2*
d_1+20*b_3*d_0+20*a_3)*x2_3^3+(d_0*x2_6^3+6*d_1*x2_5^3+15*d_2*x2_4^3)*b_0+(6*
b_1*x2_5^3+15*b_2*x2_4^3)*d_0+(-15*x3_2^4-15*x4_2^4+30*b_1*d_1+15*a_2)*x2_4^3+(
-6*x3_1^4-6*x4_1^4+6*a_1)*x2_5^3-x2_6^3*(x3_0^4+x4_0^4-a_0))*k5^4-k3*x1_6^2+k4*
x2_6^3-k6^4*x3_6^4-k6^4*x4_6^4+x2_7^3, a_6, b_6, d_6, ((x3_5^4-a_5)*x2_0^3+(5*
x3_4^4-5*a_4)*x2_1^3+(10*x3_3^4-10*a_3)*x2_2^3+(10*x3_2^4-10*a_2)*x2_3^3+(5*
x3_1^4-5*a_1)*x2_4^3+x2_5^3*(x3_0^4-a_0))*k5^4+k6^4*x3_5^4+x3_6^4, ((x4_5^4-b_0
*d_5-5*b_1*d_4-10*b_2*d_3-10*b_3*d_2-5*b_4*d_1-b_5*d_0)*x2_0^3+(5*x4_4^4-5*b_0*
d_4-20*b_1*d_3-30*b_2*d_2-20*b_3*d_1-5*b_4*d_0)*x2_1^3+(-d_0*x2_5^3-5*d_1*x2_4^
3-10*d_2*x2_3^3-10*d_3*x2_2^3)*b_0+(-5*b_1*x2_4^3-10*b_2*x2_3^3-10*b_3*x2_2^3)*
d_0+(10*x4_3^4-30*b_1*d_2-30*b_2*d_1)*x2_2^3-20*d_1*x2_3^3*b_1+10*x2_3^3*x4_2^4
+5*x2_4^3*x4_1^4+x2_5^3*x4_0^4)*k5^4+k6^4*x4_5^4+x4_6^4, -x5_9-2258697031896644\
8859581811008740711605659024618465662993240052035713596505608119338560906943841\
0534967402932864399829314937656470162371528303587645674511793208366908215077315\
5475224025634165778299845067500912713088298170830286186925493931234641133738190\
1886271242089920506065591605021520153444690018902643408773077340944458998654498\
8398607704246281308689901444549675249253100623144184120095783250773741401027903\
3060210342151541278311182090778444360672251288466441957242555145827403964894836\
363822720866484848, -a_1, -a_2, -a_3, -a_4, -a_5, -a_6, -b_1, -b_2, -b_3, -b_4,
-b_5, -b_6, -d_1, -d_2, -d_3, -d_4, -d_5, -d_6, z_aux^3-1], [x5_9, x5_8, x1_8,
x5_7, x2_7, x1_7, x5_6, x4_6, x3_6, x2_6, x1_6, d_6, b_6, a_6, x5_5, x4_5, x3_5
, x2_5, x1_5, d_5, b_5, a_5, x5_4, x4_4, x3_4, x2_4, x1_4, d_4, b_4, a_4, x5_3,
x4_3, x3_3, x2_3, x1_3, d_3, b_3, a_3, x5_2, x4_2, x3_2, x2_2, x1_2, d_2, b_2,
a_2, x5_1, x4_1, x3_1, x2_1, x1_1, d_1, b_1, a_1, x5_0, x4_0, x3_0, x2_0, x1_0,
d_0, b_0, a_0, z_aux, w_aux, k3, k4, k5, k6, k7], [], [2100350059573498705555-
x5_0, -k7*x1_0+x5_1, 1712950256275109199273-a_0, a_1, 358514408893152687490-b_0
, b_1, 3330771270539489755241-d_0, d_1, -x5_1+
2367240827870923862454051838384724336952416, -k7*x1_1+x5_2, k3*x1_0-k4*x2_0+k7*
x1_0+x1_1, -x5_2-\
8944271529708242688792456490783945458323571409279759075043507848, -k7*x1_2+x5_3
, (k3+k7)*x1_1+x1_2-k4*x2_1, b_0*d_0*k5*x2_0+a_0*k5*x2_0-k5*x2_0*x3_0-k5*x2_0*
x4_0-k3*x1_0+k4*x2_0-k6*x3_0-k6*x4_0+x2_1, -x5_3-100532856817638271763303870059\
9755433196544347097615226359749039911363367856991027744209563087699161200179562\
1382409688484373980, -k7*x1_3+x5_4, (k3+k7)*x1_2+x1_3-k4*x2_2, ((b_0*d_1+b_1*
d_0+a_1-x3_1-x4_1)*x2_0-x2_1*(-b_0*d_0-a_0+x3_0+x4_0))*k5-x1_1*k3+k4*x2_1-k6*
x3_1-k6*x4_1+x2_2, -a_0*k5*x2_0+k5*x2_0*x3_0+k6*x3_0+x3_1, -b_0*d_0*k5*x2_0+k5*
x2_0*x4_0+k6*x4_0+x4_1, -x5_4+2478751653031800428704876872677336450736151398464\
7214075732773311696184826948156149321049641547251279786673160150497463382117265\
353623524544748014427709486264698222669802462750766740917890776, -k7*x1_4+x5_5,
(k3+k7)*x1_3+x1_4-k4*x2_3, ((b_0*d_2+2*b_1*d_1+b_2*d_0+a_2-x3_2-x4_2)*x2_0+(2*
b_0*d_1+2*b_1*d_0+2*a_1-2*x3_1-2*x4_1)*x2_1+x2_2*(b_0*d_0+a_0-x3_0-x4_0))*k5-
x1_2*k3+k4*x2_2-k6*x3_2-k6*x4_2+x2_3, a_2, b_2, d_2, ((-a_1+x3_1)*x2_0-x2_1*(
a_0-x3_0))*k5+k6*x3_1+x3_2, ((-b_0*d_1-b_1*d_0+x4_1)*x2_0-x2_1*(b_0*d_0-x4_0))*
k5+k6*x4_1+x4_2, -x5_5-61116434486221571878892109712526810857261879001674364065\
7257805886742820798770828150975549519355650532433792911133104834229204173376289\
0246352294894008371488111463490492480458317617214979541006137288095099919995745\
0179136250220583823962853997049079637164, -k7*x1_5+x5_6, (k3+k7)*x1_4+x1_5-k4*
x2_4, ((b_0*d_3+3*b_1*d_2+3*b_2*d_1+b_3*d_0+a_3-x3_3-x4_3)*x2_0+(3*b_0*d_2+6*
b_1*d_1+3*b_2*d_0+3*a_2-3*x3_2-3*x4_2)*x2_1+(3*b_0*d_1+3*b_1*d_0+3*a_1-3*x3_1-3
*x4_1)*x2_2+x2_3*(b_0*d_0+a_0-x3_0-x4_0))*k5-x1_3*k3+k4*x2_3-k6*x3_3-k6*x4_3+
x2_4, a_3, b_3, d_3, ((x3_2-a_2)*x2_0+(2*x3_1-2*a_1)*x2_1-x2_2*(a_0-x3_0))*k5+
k6*x3_2+x3_3, ((-b_0*d_2-2*b_1*d_1-b_2*d_0+x4_2)*x2_0+(-2*b_0*d_1-2*b_1*d_0+2*
x4_1)*x2_1+x2_2*(-b_0*d_0+x4_0))*k5+k6*x4_2+x4_3, -x5_6+15068950371611486092063\
6230639858084800230422098316158761663907389825229831444752650028623571790889191\
5434217020176116246936041233108927985160885220018539174195601213873471492631447\
0437237290420996929497162487720557294534113326539421110707071164395614262727550\
1946561843449854480293033670542914623106697299606826798852, -k7*x1_6+x5_7, (k3+
k7)*x1_5+x1_6-k4*x2_5, ((b_0*d_4+4*b_1*d_3+6*b_2*d_2+4*b_3*d_1+b_4*d_0+a_4-x3_4
-x4_4)*x2_0+(4*b_0*d_3+12*b_1*d_2+12*b_2*d_1+4*b_3*d_0+4*a_3-4*x3_3-4*x4_3)*
x2_1+(6*b_0*d_2+12*b_1*d_1+6*b_2*d_0+6*a_2-6*x3_2-6*x4_2)*x2_2+(4*b_0*d_1+4*b_1
*d_0+4*a_1-4*x3_1-4*x4_1)*x2_3+x2_4*(b_0*d_0+a_0-x3_0-x4_0))*k5-x1_4*k3+k4*x2_4
-k6*x3_4-k6*x4_4+x2_5, a_4, b_4, d_4, ((x3_3-a_3)*x2_0+(3*x3_2-3*a_2)*x2_1+(3*
x3_1-3*a_1)*x2_2+x2_3*(-a_0+x3_0))*k5+k6*x3_3+x3_4, ((-b_0*d_3-3*b_1*d_2-3*b_2*
d_1-b_3*d_0+x4_3)*x2_0+(-3*b_0*d_2-6*b_1*d_1-3*b_2*d_0+3*x4_2)*x2_1+(-d_0*x2_3-\
3*d_1*x2_2)*b_0-3*x2_2*b_1*d_0+3*x2_2*x4_1+x2_3*x4_0)*k5+k6*x4_3+x4_4, -x5_7-37\
1542069184815749898337427228249804525353575039514727363105064773759876494887559\
8626548406516144363502529414261473659151002543919291473283579805952076096088097\
9852881709647820890290758221635676022829719134652502938005949504859507504456203\
3412711228375709171992929928742860171088623108441617363045359034870000723811765\
972426840844911746001693474616088408367015567405257068642082692, -k7*x1_7+x5_8,
(k3+k7)*x1_6+x1_7-k4*x2_6, ((b_0*d_5+5*b_1*d_4+10*b_2*d_3+10*b_3*d_2+5*b_4*d_1+
b_5*d_0+a_5-x3_5-x4_5)*x2_0+(5*b_0*d_4+20*b_1*d_3+30*b_2*d_2+20*b_3*d_1+5*b_4*
d_0+5*a_4-5*x3_4-5*x4_4)*x2_1+(10*b_0*d_3+30*b_1*d_2+30*b_2*d_1+10*b_3*d_0+10*
a_3-10*x3_3-10*x4_3)*x2_2+(10*b_0*d_2+20*b_1*d_1+10*b_2*d_0+10*a_2-10*x3_2-10*
x4_2)*x2_3+(d_0*x2_5+5*d_1*x2_4)*b_0+5*b_1*d_0*x2_4+(-5*x3_1-5*x4_1+5*a_1)*x2_4
-x2_5*(x3_0+x4_0-a_0))*k5-k3*x1_5+k4*x2_5-k6*x3_5-k6*x4_5+x2_6, a_5, b_5, d_5,
((x3_4-a_4)*x2_0+(4*x3_3-4*a_3)*x2_1+(6*x3_2-6*a_2)*x2_2+(4*x3_1-4*a_1)*x2_3+
x2_4*(-a_0+x3_0))*k5+k6*x3_4+x3_5, ((-b_0*d_4-4*b_1*d_3-6*b_2*d_2-4*b_3*d_1-b_4
*d_0+x4_4)*x2_0+(-4*b_0*d_3-12*b_1*d_2-12*b_2*d_1-4*b_3*d_0+4*x4_3)*x2_1+(-d_0*
x2_4-4*d_1*x2_3-6*d_2*x2_2)*b_0+(-4*b_1*x2_3-6*b_2*x2_2)*d_0+(-12*b_1*d_1+6*
x4_2)*x2_2+4*x4_1*x2_3+x4_0*x2_4)*k5+k6*x4_4+x4_5, -x5_8+9160791280738150410144\
7060361684012250468442381902939036953502775299461472280714200096211010803475548\
4843648485519351202551484694144126897810388514668973085933562745633894910301957\
3073402191257472656774414301300624402658381083998357526615240805224482018785066\
1778657641366492634831269300910167971155628178758357625260515561869065660631105\
9843069637242499652526873208981890799222466392116817334429099803783369934628389\
752470470141558842451802904, -k7*x1_8+x5_9, (k3+k7)*x1_7+x1_8-k4*x2_7, ((b_0*
d_6+6*b_1*d_5+15*b_2*d_4+20*b_3*d_3+15*b_4*d_2+6*b_5*d_1+b_6*d_0+a_6-x3_6-x4_6)
*x2_0+(6*b_0*d_5+30*b_1*d_4+60*b_2*d_3+60*b_3*d_2+30*b_4*d_1+6*b_5*d_0+6*a_5-6*
x3_5-6*x4_5)*x2_1+(15*b_0*d_4+60*b_1*d_3+90*b_2*d_2+60*b_3*d_1+15*b_4*d_0+15*
a_4-15*x3_4-15*x4_4)*x2_2+(20*b_0*d_3+60*b_1*d_2+60*b_2*d_1+20*b_3*d_0+20*a_3-\
20*x3_3-20*x4_3)*x2_3+(d_0*x2_6+6*d_1*x2_5+15*d_2*x2_4)*b_0+(6*b_1*x2_5+15*b_2*
x2_4)*d_0+(30*b_1*d_1+15*a_2-15*x3_2-15*x4_2)*x2_4+(-6*x3_1-6*x4_1+6*a_1)*x2_5-
x2_6*(x3_0+x4_0-a_0))*k5-k3*x1_6+k4*x2_6-k6*x3_6-k6*x4_6+x2_7, a_6, b_6, d_6, (
(x3_5-a_5)*x2_0+(5*x3_4-5*a_4)*x2_1+(10*x3_3-10*a_3)*x2_2+(10*x3_2-10*a_2)*x2_3
+(5*x3_1-5*a_1)*x2_4+x2_5*(-a_0+x3_0))*k5+k6*x3_5+x3_6, ((-b_0*d_5-5*b_1*d_4-10
*b_2*d_3-10*b_3*d_2-5*b_4*d_1-b_5*d_0+x4_5)*x2_0+(-5*b_0*d_4-20*b_1*d_3-30*b_2*
d_2-20*b_3*d_1-5*b_4*d_0+5*x4_4)*x2_1+(-d_0*x2_5-5*d_1*x2_4-10*d_2*x2_3-10*d_3*
x2_2)*b_0+(-5*b_1*x2_4-10*b_2*x2_3-10*b_3*x2_2)*d_0+(-30*b_1*d_2-30*b_2*d_1+10*
x4_3)*x2_2-20*d_1*x2_3*b_1+10*x2_3*x4_2+5*x2_4*x4_1+x2_5*x4_0)*k5+k6*x4_5+x4_6,
-x5_9-2258697031896644885958181100874071160565902461846566299324005203571359650\
5608119338560906943841053496740293286439982931493765647016237152830358764567451\
1793208366908215077315547522402563416577829984506750091271308829817083028618692\
5493931234641133738190188627124208992050606559160502152015344469001890264340877\
3077340944458998654498839860770424628130868990144454967524925310062314418412009\
5783250773741401027903306021034215154127831118209077844436067225128846644195724\
2555145827403964894836363822720866484848, -a_1, -a_2, -a_3, -a_4, -a_5, -a_6, -
b_1, -b_2, -b_3, -b_4, -b_5, -b_6, -d_1, -d_2, -d_3, -d_4, -d_5, -d_6, z_aux-1]

SubsByDepth Usage (real, cpu, memory):	3.222 	3.603 	367226128

memory used=1078.7MB, alloc=135.8MB, time=12.24
